"use strict";
Component({
    properties: {
        height: {
            type: String,
            value: '220rpx'
        },
        initial: {
            type: Number,
            value: 0
        },
        interval: {
            type: Number,
            value: 3000
        }
    },
    data: {
        items: [],
        index: 0,
        label: [],
        sx: 0,
        ex: 0,
        isMoving: false
    },
    relations: {
        './item/item': {
            type: 'child',
            linked: function (target) {
                this.data.items.push(target);
            }
        }
    },
    ready: function () {
        var _a = this.data, initial = _a.initial, items = _a.items;
        this.setActiveItem(initial > items.length - 1 ? 0 : initial)._loop()
            .setData({ label: new Array(items.length).fill(1) });
    },
    detached: function () {
        this._clearTimer();
    },
    methods: {
        touchStart: function (_a) {
            var pageX = _a.touches[0].pageX;
            this.data.sx = pageX;
        },
        touchMove: function (_a) {
            var pageX = _a.touches[0].pageX;
            this.data.ex = pageX;
        },
        touchEnd: function () {
            var _a = this.data, sx = _a.sx, ex = _a.ex, length = _a.items.length, isMoving = _a.isMoving;
            if (length <= 2 || isMoving) {
                return;
            }
            if (sx < ex - 50) {
                this.prev();
            }
            else if (sx > ex + 50) {
                this.next();
            }
        },
        setActiveItem: function (nameOrIndex) {
            var _this = this;
            var items = this.data.items;
            if (items.length <= 1) {
                return this;
            }
            var index = this._getIndex(nameOrIndex);
            if (index == null) {
                return console.warn("\u672A\u627E\u5230" + (typeof nameOrIndex === 'number' ? '索引' : 'name') + "\u4E3A" + nameOrIndex + "\u7684\u8F6E\u64AD\u7EC4\u4EF6");
            }
            this.setData({ index: index });
            var offset = Math.floor(items.length / 2);
            var arr = items.slice(index).concat(items.slice(0, index));
            arr = arr.slice(-offset).concat(arr.slice(0, arr.length - offset));
            setTimeout(function () {
                _this.data.isMoving = false;
                arr.length <= 2 && arr[0].setData({ translate: '100%' });
            }, 500);
            arr.forEach(function (v, i) { return v.setData({ translate: (i - offset) * 100 + "%" }); });
            this.data.isMoving = true;
            return this;
        },
        prev: function () {
            var _a = this.data, items = _a.items, index = _a.index;
            this._clearTimer().setActiveItem(index <= 0 ? items.length - 1 : index - 1)._loop();
            return this;
        },
        next: function () {
            var _a = this.data, items = _a.items, index = _a.index;
            this._clearTimer().setActiveItem(index >= items.length - 1 ? 0 : index + 1)._loop();
            return this;
        },
        _getIndex: function (nameOrIndex) {
            var items = this.data.items;
            if (typeof nameOrIndex === 'number') {
                if (nameOrIndex >= 0 && nameOrIndex <= items.length - 1) {
                    return nameOrIndex;
                }
            }
            else {
                var index = items.findIndex(function (v) { return v.data.name === nameOrIndex; });
                if (index > -1) {
                    return index;
                }
            }
            return void 0;
        },
        _loop: function () {
            var interval = this.data.interval;
            interval > 100 && (this.data.timer = setTimeout(this.next.bind(this), this.data.interval + 500));
            return this;
        },
        _clearTimer: function () {
            var timer = this.data.timer;
            if (timer) {
                clearTimeout(timer);
                this.data.timer = void 0;
            }
            return this;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,