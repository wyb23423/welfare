"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("../../constant/store");
var http_1 = require("../../utils/http");
Component({
    properties: {
        isindex: {
            type: Boolean,
            value: false
        }
    },
    data: {
        time: 0,
        count: 0,
        hasCommodity: false,
        integral: 0,
        follow: 0,
        collection: 0
    },
    pageLifetimes: {
        show: function () {
            this.data.isindex && this.initInfoValue();
            this.data.hasCommodity = !wx.getStorageSync(store_1.IS_OFFICIAL);
            this.setData({ username: wx.getStorageSync(store_1.USER_NAME) });
        }
    },
    methods: {
        clickAvator: function () {
            var _a = this.data, count = _a.count, time = _a.time, hasCommodity = _a.hasCommodity;
            if (!hasCommodity) {
                return;
            }
            var now = Date.now();
            if (now - time >= 500) {
                count = 0;
            }
            this.data.time = now;
            this.data.count = ++count;
            count >= 5 && this.authentication();
        },
        authentication: function () {
            var _this = this;
            wx.showModal({
                content: '申请成为社区管理员?',
                success: function (_a) {
                    var confirm = _a.confirm;
                    if (confirm) {
                        http_1.request({ url: '/api/user/communityAuthorization' })
                            .then(function () { return wx.showToast({ title: '申请成功' }); })
                            .then(function () { return _this.setData({ hasCommodity: false }); })
                            .catch(console.log);
                    }
                },
                complete: function () { return _this.data.count = _this.data.time = 0; }
            });
        },
        initInfoValue: function () {
            var _this = this;
            http_1.request({ url: '/api/follow', notShowMsg: true })
                .then(function (_a) {
                var data = _a.data;
                return _this.setData({ follow: data.length });
            })
                .catch(console.log);
            Promise.all([0, 1].map(function (type) {
                return http_1.request({
                    url: '/api/like',
                    data: { type: type },
                    notShowMsg: true
                }).catch(function () { return ({ data: [] }); });
            }))
                .then(function (_a) {
                var res1 = _a[0].data, res2 = _a[1].data;
                return _this.setData({ collection: res1.length + res2.length });
            })
                .catch(console.log);
            http_1.request({ url: '/api/user', notShowMsg: true })
                .then(function (_a) {
                var integral = _a.data.integral;
                return _this.setData({ integral: integral });
            })
                .catch(console.log);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uX2hlYWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwZXJzb25faGVhZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLDhDQUE4RDtBQUU5RCx5Q0FBMkM7QUFPM0MsU0FBUyxDQUFhO0lBQ2xCLFVBQVUsRUFBRTtRQUNSLE9BQU8sRUFBRTtZQUNMLElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSyxFQUFFLEtBQUs7U0FDZjtLQUNKO0lBQ0QsSUFBSSxFQUFFO1FBQ0YsSUFBSSxFQUFFLENBQUM7UUFDUCxLQUFLLEVBQUUsQ0FBQztRQUNSLFlBQVksRUFBRSxLQUFLO1FBQ25CLFFBQVEsRUFBRSxDQUFDO1FBQ1gsTUFBTSxFQUFFLENBQUM7UUFDVCxVQUFVLEVBQUUsQ0FBQztLQUNoQjtJQUNELGFBQWEsRUFBRTtRQUNYLElBQUk7WUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLG1CQUFXLENBQUMsQ0FBQztZQUN6RCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsaUJBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDO0tBQ0o7SUFDRCxPQUFPLEVBQUU7UUFDTCxXQUFXO1lBRUgsSUFBQSxjQUF1QyxFQUF0QyxnQkFBSyxFQUFFLGNBQUksRUFBRSw4QkFBeUIsQ0FBQztZQUM1QyxJQUFHLENBQUMsWUFBWSxFQUFFO2dCQUNkLE9BQU87YUFDVjtZQUNELElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN2QixJQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxFQUFFO2dCQUNsQixLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBQ2I7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7WUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLENBQUM7WUFDMUIsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEMsQ0FBQztRQUNELGNBQWM7WUFBZCxpQkFhQztZQVpHLEVBQUUsQ0FBQyxTQUFTLENBQUM7Z0JBQ1QsT0FBTyxFQUFFLFlBQVk7Z0JBQ3JCLE9BQU8sRUFBRSxVQUFDLEVBQVM7d0JBQVIsb0JBQU87b0JBQ2QsSUFBRyxPQUFPLEVBQUU7d0JBQ1IsY0FBTyxDQUFDLEVBQUMsR0FBRyxFQUFFLGtDQUFrQyxFQUFDLENBQUM7NkJBQzdDLElBQUksQ0FBQyxjQUFNLE9BQUEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUMsQ0FBQyxFQUE3QixDQUE2QixDQUFDOzZCQUN6QyxJQUFJLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxZQUFZLEVBQUUsS0FBSyxFQUFDLENBQUMsRUFBbkMsQ0FBbUMsQ0FBQzs2QkFDL0MsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztxQkFDM0I7Z0JBQ0wsQ0FBQztnQkFDRCxRQUFRLEVBQUUsY0FBTSxPQUFBLEtBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBcEMsQ0FBb0M7YUFDdkQsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUNELGFBQWE7WUFBYixpQkFxQkM7WUFuQkcsY0FBTyxDQUFjLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7aUJBQ3pELElBQUksQ0FBQyxVQUFDLEVBQVE7b0JBQU4sY0FBSTtnQkFBTyxPQUFBLEtBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQXRDLENBQXNDLENBQUM7aUJBQzFELEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFHeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJO2dCQUN2QixPQUFBLGNBQU8sQ0FBMkI7b0JBQzlCLEdBQUcsRUFBRSxXQUFXO29CQUNoQixJQUFJLEVBQUUsRUFBRSxJQUFJLE1BQUEsRUFBRTtvQkFDZCxVQUFVLEVBQUUsSUFBSTtpQkFDbkIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxjQUFNLE9BQUEsQ0FBQyxFQUFDLElBQUksRUFBRSxFQUFFLEVBQUMsQ0FBQyxFQUFaLENBQVksQ0FBQztZQUo1QixDQUk0QixDQUMvQixDQUFDO2lCQUNHLElBQUksQ0FBQyxVQUFDLEVBQWdDO29CQUE3QixpQkFBVSxFQUFNLGlCQUFVO2dCQUFRLE9BQUEsS0FBSSxDQUFDLE9BQVEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUF4RCxDQUF3RCxDQUFDO2lCQUNwRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBR3hCLGNBQU8sQ0FBUSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO2lCQUNqRCxJQUFJLENBQUMsVUFBQyxFQUFzQjtvQkFBWiwyQkFBUTtnQkFBUyxPQUFBLEtBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxDQUFDO1lBQTNCLENBQTJCLENBQUM7aUJBQzdELEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsQ0FBQztLQUNKO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIOS4quS6uuS/oeaBr+mhtemhtumDqOWktOWDj+WPiuWQjeensFxyXG4gKi9cclxuaW1wb3J0IHsgVVNFUl9OQU1FLCBJU19PRkZJQ0lBTCB9IGZyb20gJy4uLy4uL2NvbnN0YW50L3N0b3JlJztcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb24gfSBmcm9tICcuLi8uLi9jb25zdGFudC9pbmRleCc7XHJcbmltcG9ydCB7IHJlcXVlc3QgfSBmcm9tICcuLi8uLi91dGlscy9odHRwJztcclxuXHJcbmludGVyZmFjZSBQZXJzb25IZWFkIGV4dGVuZHMgV3hDb21wb25lbnQge1xyXG4gICAgYXV0aGVudGljYXRpb24oKTogdm9pZDtcclxuICAgIGluaXRJbmZvVmFsdWUoKTogdm9pZDtcclxufVxyXG5cclxuQ29tcG9uZW50PFBlcnNvbkhlYWQ+KHtcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBpc2luZGV4OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgdGltZTogMCwgLy8g5LiK5qyh54K55Ye75aS05YOP5pe26Ze0XHJcbiAgICAgICAgY291bnQ6IDAsIC8vIOi/nue7reeCueWHu+WktOWDj+asoeaVsFxyXG4gICAgICAgIGhhc0NvbW1vZGl0eTogZmFsc2UsXHJcbiAgICAgICAgaW50ZWdyYWw6IDAsXHJcbiAgICAgICAgZm9sbG93OiAwLFxyXG4gICAgICAgIGNvbGxlY3Rpb246IDBcclxuICAgIH0sXHJcbiAgICBwYWdlTGlmZXRpbWVzOiB7XHJcbiAgICAgICAgc2hvdyh0aGlzOiBQZXJzb25IZWFkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5pc2luZGV4ICYmIHRoaXMuaW5pdEluZm9WYWx1ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaGFzQ29tbW9kaXR5ID0gIXd4LmdldFN0b3JhZ2VTeW5jKElTX09GRklDSUFMKTtcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHt1c2VybmFtZTogd3guZ2V0U3RvcmFnZVN5bmMoVVNFUl9OQU1FKX0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgY2xpY2tBdmF0b3IoKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItY29uc3RcclxuICAgICAgICAgICAgbGV0IHtjb3VudCwgdGltZSwgaGFzQ29tbW9kaXR5fSA9IHRoaXMuZGF0YTtcclxuICAgICAgICAgICAgaWYoIWhhc0NvbW1vZGl0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGlmKG5vdyAtIHRpbWUgPj0gNTAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbWUgPSBub3c7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb3VudCA9ICsrY291bnQ7XHJcbiAgICAgICAgICAgIGNvdW50ID49IDUgJiYgdGhpcy5hdXRoZW50aWNhdGlvbigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXV0aGVudGljYXRpb24oKSB7XHJcbiAgICAgICAgICAgIHd4LnNob3dNb2RhbCh7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAn55Sz6K+35oiQ5Li656S+5Yy6566h55CG5ZGYPycsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoe2NvbmZpcm19KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29uZmlybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0KHt1cmw6ICcvYXBpL3VzZXIvY29tbXVuaXR5QXV0aG9yaXphdGlvbid9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gd3guc2hvd1RvYXN0KHt0aXRsZTogJ+eUs+ivt+aIkOWKnyd9KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuc2V0RGF0YSh7aGFzQ29tbW9kaXR5OiBmYWxzZX0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGNvbnNvbGUubG9nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHRoaXMuZGF0YS5jb3VudCA9IHRoaXMuZGF0YS50aW1lID0gMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluaXRJbmZvVmFsdWUoKSB7XHJcbiAgICAgICAgICAgIC8vIOWFs+azqOaVsFxyXG4gICAgICAgICAgICByZXF1ZXN0PElNZXJjaGFudFtdPih7IHVybDogJy9hcGkvZm9sbG93Jywgbm90U2hvd01zZzogdHJ1ZSB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB0aGlzLnNldERhdGEhKHsgZm9sbG93OiBkYXRhLmxlbmd0aCB9KSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcblxyXG4gICAgICAgICAgICAvLyDmlLbol4/mlbBcclxuICAgICAgICAgICAgUHJvbWlzZS5hbGwoWzAsIDFdLm1hcCh0eXBlID0+XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0PElDb21tb2RpdHlbXSB8IElBY3RpdmVbXT4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hcGkvbGlrZScsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyB0eXBlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbm90U2hvd01zZzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4gKHtkYXRhOiBbXX0pKVxyXG4gICAgICAgICAgICApKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKFt7IGRhdGE6IHJlczEgfSwgeyBkYXRhOiByZXMyIH1dKSA9PiB0aGlzLnNldERhdGEhKHsgY29sbGVjdGlvbjogcmVzMS5sZW5ndGggKyByZXMyLmxlbmd0aCB9KSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcblxyXG4gICAgICAgICAgICAvLyDnp6/liIYo5YWs55uKKVxyXG4gICAgICAgICAgICByZXF1ZXN0PElVc2VyPih7IHVybDogJy9hcGkvdXNlcicsIG5vdFNob3dNc2c6IHRydWUgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKCh7IGRhdGE6IHsgaW50ZWdyYWwgfSB9KSA9PiB0aGlzLnNldERhdGEhKHsgaW50ZWdyYWwgfSkpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbiJdfQ==