"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var status_1 = require("../../../../constant/status");
var http_1 = require("../../../../utils/http");
Page({
    id: 0,
    data: {
        auditing: [],
        join: [],
        refuse: [],
        STATUS: {
            AUDITING: status_1.SIGN_STATUS.AUDITING,
            AWAIT: status_1.SIGN_STATUS.AWAIT,
            REFUSE: status_1.SIGN_STATUS.REFUSE
        }
    },
    onLoad: function (query) {
        var _this = this;
        var activityId = this.id = +query.id;
        http_1.request({
            url: '/api/activity/participation/auditList',
            data: { activityId: activityId }
        })
            .then(function (_a) {
            var list = _a.data;
            var auditing = [];
            var refuse = [];
            var join = [];
            list.forEach(function (v) {
                if (v.status === status_1.SIGN_STATUS.AUDITING) {
                    auditing.push(v);
                }
                else if (v.status === status_1.SIGN_STATUS.REFUSE) {
                    refuse.push(v);
                }
                else {
                    join.push(v);
                }
            });
            _this.setData({ refuse: refuse, auditing: auditing, join: join });
        })
            .catch(console.log);
    },
    doAuit: function (e) {
        var _this = this;
        var isOk = !!e.target.dataset.ok;
        var index = e.currentTarget.dataset.index;
        wx.showModal({
            title: this.data.auditing[index].name,
            content: (!isOk ? '拒绝' : '同意') + '该用户参加该活动?',
            success: function (_a) {
                var confirm = _a.confirm;
                return confirm && _this._doAuit(isOk, index);
            }
        });
    },
    _doAuit: function (isOk, index) {
        var _this = this;
        var _a = this.data, auditing = _a.auditing, refuse = _a.refuse, join = _a.join;
        http_1.request({
            url: '/api/activity/participation/audit',
            data: {
                flag: isOk,
                activityId: this.id,
                userId: auditing[index].userId
            }
        })
            .then(function () {
            wx.showToast({ title: '操作成功' });
            var item = auditing.splice(index, 1)[0];
            item.status = isOk ? status_1.SIGN_STATUS.AWAIT : status_1.SIGN_STATUS.REFUSE;
            (isOk ? join : refuse).push(item);
            _this.setData({ auditing: auditing, join: join, refuse: refuse });
        })
            .catch(console.log);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNpZ24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzREFBMEQ7QUFDMUQsK0NBQWlEO0FBU2pELElBQUksQ0FBQztJQUNELEVBQUUsRUFBRSxDQUFDO0lBQ0wsSUFBSSxFQUFFO1FBQ0YsUUFBUSxFQUFZLEVBQUU7UUFDdEIsSUFBSSxFQUFZLEVBQUU7UUFDbEIsTUFBTSxFQUFZLEVBQUU7UUFDcEIsTUFBTSxFQUFFO1lBQ0osUUFBUSxFQUFFLG9CQUFXLENBQUMsUUFBUTtZQUM5QixLQUFLLEVBQUUsb0JBQVcsQ0FBQyxLQUFLO1lBQ3hCLE1BQU0sRUFBRSxvQkFBVyxDQUFDLE1BQU07U0FDN0I7S0FDSjtJQUNELE1BQU0sWUFBQyxLQUFtQjtRQUExQixpQkF5QkM7UUF4QkcsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDdkMsY0FBTyxDQUFXO1lBQ2QsR0FBRyxFQUFFLHVDQUF1QztZQUM1QyxJQUFJLEVBQUUsRUFBRSxVQUFVLFlBQUEsRUFBRTtTQUN2QixDQUFDO2FBQ0csSUFBSSxDQUFDLFVBQUMsRUFBWTtnQkFBWCxjQUFVO1lBQ2QsSUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO1lBQzlCLElBQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztZQUM1QixJQUFNLElBQUksR0FBYSxFQUFFLENBQUM7WUFHMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUM7Z0JBQ1YsSUFBRyxDQUFDLENBQUMsTUFBTSxLQUFLLG9CQUFXLENBQUMsUUFBUSxFQUFFO29CQUNsQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNwQjtxQkFBTSxJQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssb0JBQVcsQ0FBQyxNQUFNLEVBQUU7b0JBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2xCO3FCQUFNO29CQUNILElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hCO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFFSCxLQUFJLENBQUMsT0FBUSxDQUFDLEVBQUMsTUFBTSxRQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUMsQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNELE1BQU0sWUFBQyxDQUE0QztRQUFuRCxpQkFTQztRQVJHLElBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDbkMsSUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBRTVDLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDVCxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSTtZQUNyQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxXQUFXO1lBQzVDLE9BQU8sRUFBRSxVQUFDLEVBQVM7b0JBQVIsb0JBQU87Z0JBQU0sT0FBQSxPQUFPLElBQUksS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1lBQXBDLENBQW9DO1NBQy9ELENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCxPQUFPLFlBQUMsSUFBYSxFQUFFLEtBQWE7UUFBcEMsaUJBbUJDO1FBbEJTLElBQUEsY0FBb0MsRUFBbkMsc0JBQVEsRUFBRSxrQkFBTSxFQUFFLGNBQWlCLENBQUM7UUFFM0MsY0FBTyxDQUFDO1lBQ0osR0FBRyxFQUFFLG1DQUFtQztZQUN4QyxJQUFJLEVBQUU7Z0JBQ0YsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNuQixNQUFNLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU07YUFDakM7U0FDSixDQUFDO2FBQ0QsSUFBSSxDQUFDO1lBQ0YsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxvQkFBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsb0JBQVcsQ0FBQyxNQUFNLENBQUM7WUFDNUQsQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25DLEtBQUksQ0FBQyxPQUFRLENBQUMsRUFBQyxRQUFRLFVBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0lHTl9TVEFUVVMgfSBmcm9tICcuLi8uLi8uLi8uLi9jb25zdGFudC9zdGF0dXMnO1xyXG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvaHR0cCc7XHJcblxyXG5pbnRlcmZhY2UgRW5JbmZvIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHBob25lOiBzdHJpbmc7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIHN0YXR1czogU0lHTl9TVEFUVVM7XHJcbn1cclxuXHJcblBhZ2Uoe1xyXG4gICAgaWQ6IDAsXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgYXVkaXRpbmc6IDxFbkluZm9bXT5bXSwgLy8g5b6F5a6h5qC4XHJcbiAgICAgICAgam9pbjogPEVuSW5mb1tdPltdLCAvLyDlj4LliqDogIXliJfooahcclxuICAgICAgICByZWZ1c2U6IDxFbkluZm9bXT5bXSwgLy8g5bey5ouS57udXHJcbiAgICAgICAgU1RBVFVTOiB7XHJcbiAgICAgICAgICAgIEFVRElUSU5HOiBTSUdOX1NUQVRVUy5BVURJVElORyxcclxuICAgICAgICAgICAgQVdBSVQ6IFNJR05fU1RBVFVTLkFXQUlULFxyXG4gICAgICAgICAgICBSRUZVU0U6IFNJR05fU1RBVFVTLlJFRlVTRVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvbkxvYWQocXVlcnk6IHtpZDogc3RyaW5nfSkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2aXR5SWQgPSB0aGlzLmlkID0gK3F1ZXJ5LmlkO1xyXG4gICAgICAgIHJlcXVlc3Q8RW5JbmZvW10+KHtcclxuICAgICAgICAgICAgdXJsOiAnL2FwaS9hY3Rpdml0eS9wYXJ0aWNpcGF0aW9uL2F1ZGl0TGlzdCcsXHJcbiAgICAgICAgICAgIGRhdGE6IHsgYWN0aXZpdHlJZCB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHtkYXRhOiBsaXN0fSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaXRpbmc6IEVuSW5mb1tdID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWZ1c2U6IEVuSW5mb1tdID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBqb2luOiBFbkluZm9bXSA9IFtdO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsaXN0LmZvckVhY2godiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodi5zdGF0dXMgPT09IFNJR05fU1RBVFVTLkFVRElUSU5HKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGl0aW5nLnB1c2godik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHYuc3RhdHVzID09PSBTSUdOX1NUQVRVUy5SRUZVU0UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmdXNlLnB1c2godik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgam9pbi5wdXNoKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe3JlZnVzZSwgYXVkaXRpbmcsIGpvaW59KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGNvbnNvbGUubG9nKTtcclxuICAgIH0sXHJcbiAgICBkb0F1aXQoZTogQmFzZUV2ZW50PHtvaz86IHN0cmluZ30sIHtpbmRleDogbnVtYmVyfT4pIHtcclxuICAgICAgICBjb25zdCBpc09rID0gISFlLnRhcmdldC5kYXRhc2V0Lm9rO1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuaW5kZXg7XHJcblxyXG4gICAgICAgIHd4LnNob3dNb2RhbCh7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmRhdGEuYXVkaXRpbmdbaW5kZXhdLm5hbWUsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICghaXNPayA/ICfmi5Lnu50nIDogJ+WQjOaEjycpICsgJ+ivpeeUqOaIt+WPguWKoOivpea0u+WKqD8nLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAoe2NvbmZpcm19KSA9PiBjb25maXJtICYmIHRoaXMuX2RvQXVpdChpc09rLCBpbmRleClcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBfZG9BdWl0KGlzT2s6IGJvb2xlYW4sIGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCB7YXVkaXRpbmcsIHJlZnVzZSwgam9pbn0gPSB0aGlzLmRhdGE7XHJcblxyXG4gICAgICAgIHJlcXVlc3Qoe1xyXG4gICAgICAgICAgICB1cmw6ICcvYXBpL2FjdGl2aXR5L3BhcnRpY2lwYXRpb24vYXVkaXQnLFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICBmbGFnOiBpc09rLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZpdHlJZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgICAgIHVzZXJJZDogYXVkaXRpbmdbaW5kZXhdLnVzZXJJZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7dGl0bGU6ICfmk43kvZzmiJDlip8nIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gYXVkaXRpbmcuc3BsaWNlKGluZGV4LCAxKVswXTtcclxuICAgICAgICAgICAgaXRlbS5zdGF0dXMgPSBpc09rID8gU0lHTl9TVEFUVVMuQVdBSVQgOiBTSUdOX1NUQVRVUy5SRUZVU0U7XHJcbiAgICAgICAgICAgIChpc09rICA/IGpvaW4gOiByZWZ1c2UpLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoe2F1ZGl0aW5nLCBqb2luLCByZWZ1c2V9KTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=