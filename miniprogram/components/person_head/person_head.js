"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("../../constant/store");
var index_1 = require("../../constant/index");
var http_1 = require("../../utils/http");
Component({
    properties: {
        isindex: {
            type: Boolean,
            value: false
        }
    },
    data: {
        time: 0,
        count: 0,
        hasCommodity: false,
        integral: 0,
        follow: 0,
        collection: 0
    },
    pageLifetimes: {
        show: function () {
            this.data.isindex && this.initInfoValue();
            var auth = wx.getStorageSync(store_1.USER_AUTHENTICATION);
            this.data.hasCommodity = !(auth === index_1.Authentication.commodity || auth === index_1.Authentication.auditing);
            this.setData({ username: wx.getStorageSync(store_1.USER_NAME) });
        }
    },
    methods: {
        clickAvator: function () {
            var _a = this.data, count = _a.count, time = _a.time, hasCommodity = _a.hasCommodity;
            if (!hasCommodity) {
                return;
            }
            var now = Date.now();
            if (now - time >= 500) {
                count = 0;
            }
            this.data.time = now;
            this.data.count = ++count;
            count >= 5 && this.authentication();
        },
        authentication: function () {
            var _this = this;
            wx.showModal({
                content: '申请成为社区管理员?',
                success: function (_a) {
                    var confirm = _a.confirm;
                    if (confirm) {
                        http_1.request({ url: '/api/user/communityAuthorization' })
                            .then(function () { return wx.showToast({ title: '申请成功' }); })
                            .then(function () { return _this.setData({ hasCommodity: false }); })
                            .catch(console.log);
                    }
                },
                complete: function () { return _this.data.count = _this.data.time = 0; }
            });
        },
        initInfoValue: function () {
            var _this = this;
            http_1.request({ url: '/api/follow', notShowMsg: true })
                .then(function (_a) {
                var data = _a.data;
                return _this.setData({ follow: data.length });
            })
                .catch(console.log);
            Promise.all([0, 1].map(function (type) {
                return http_1.request({
                    url: '/api/like',
                    data: { type: type },
                    notShowMsg: true
                }).catch(function () { return ({ data: [] }); });
            }))
                .then(function (_a) {
                var res1 = _a[0].data, res2 = _a[1].data;
                return _this.setData({ collection: res1.length + res2.length });
            })
                .catch(console.log);
            http_1.request({ url: '/api/user', notShowMsg: true })
                .then(function (_a) {
                var integral = _a.data.integral;
                return _this.setData({ integral: integral });
            })
                .catch(console.log);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uX2hlYWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwZXJzb25faGVhZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLDhDQUFzRTtBQUN0RSw4Q0FBc0Q7QUFDdEQseUNBQTJDO0FBTzNDLFNBQVMsQ0FBYTtJQUNsQixVQUFVLEVBQUU7UUFDUixPQUFPLEVBQUU7WUFDTCxJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxLQUFLO1NBQ2Y7S0FDSjtJQUNELElBQUksRUFBRTtRQUNGLElBQUksRUFBRSxDQUFDO1FBQ1AsS0FBSyxFQUFFLENBQUM7UUFDUixZQUFZLEVBQUUsS0FBSztRQUNuQixRQUFRLEVBQUUsQ0FBQztRQUNYLE1BQU0sRUFBRSxDQUFDO1FBQ1QsVUFBVSxFQUFFLENBQUM7S0FDaEI7SUFDRCxhQUFhLEVBQUU7UUFDWCxJQUFJO1lBQ0EsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBRTFDLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsMkJBQW1CLENBQUMsQ0FBQztZQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLHNCQUFjLENBQUMsU0FBUyxJQUFJLElBQUksS0FBSyxzQkFBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2xHLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxpQkFBUyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQzNELENBQUM7S0FDSjtJQUNELE9BQU8sRUFBRTtRQUNMLFdBQVc7WUFFSCxJQUFBLGNBQXVDLEVBQXRDLGdCQUFLLEVBQUUsY0FBSSxFQUFFLDhCQUF5QixDQUFDO1lBQzVDLElBQUcsQ0FBQyxZQUFZLEVBQUU7Z0JBQ2QsT0FBTzthQUNWO1lBQ0QsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcs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Q29udGVudCI6WyIvKipcclxuICog5Liq5Lq65L+h5oGv6aG16aG26YOo5aS05YOP5Y+K5ZCN56ewXHJcbiAqL1xyXG5pbXBvcnQgeyBVU0VSX05BTUUsIFVTRVJfQVVUSEVOVElDQVRJT04gfSBmcm9tICcuLi8uLi9jb25zdGFudC9zdG9yZSc7XHJcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uIH0gZnJvbSAnLi4vLi4vY29uc3RhbnQvaW5kZXgnO1xyXG5pbXBvcnQgeyByZXF1ZXN0IH0gZnJvbSAnLi4vLi4vdXRpbHMvaHR0cCc7XHJcblxyXG5pbnRlcmZhY2UgUGVyc29uSGVhZCBleHRlbmRzIFd4Q29tcG9uZW50IHtcclxuICAgIGF1dGhlbnRpY2F0aW9uKCk6IHZvaWQ7XHJcbiAgICBpbml0SW5mb1ZhbHVlKCk6IHZvaWQ7XHJcbn1cclxuXHJcbkNvbXBvbmVudDxQZXJzb25IZWFkPih7XHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgaXNpbmRleDoge1xyXG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIHRpbWU6IDAsIC8vIOS4iuasoeeCueWHu+WktOWDj+aXtumXtFxyXG4gICAgICAgIGNvdW50OiAwLCAvLyDov57nu63ngrnlh7vlpLTlg4/mrKHmlbBcclxuICAgICAgICBoYXNDb21tb2RpdHk6IGZhbHNlLFxyXG4gICAgICAgIGludGVncmFsOiAwLFxyXG4gICAgICAgIGZvbGxvdzogMCxcclxuICAgICAgICBjb2xsZWN0aW9uOiAwXHJcbiAgICB9LFxyXG4gICAgcGFnZUxpZmV0aW1lczoge1xyXG4gICAgICAgIHNob3codGhpczogUGVyc29uSGVhZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaXNpbmRleCAmJiB0aGlzLmluaXRJbmZvVmFsdWUoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGF1dGggPSB3eC5nZXRTdG9yYWdlU3luYyhVU0VSX0FVVEhFTlRJQ0FUSU9OKTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmhhc0NvbW1vZGl0eSA9ICEoYXV0aCA9PT0gQXV0aGVudGljYXRpb24uY29tbW9kaXR5IHx8IGF1dGggPT09IEF1dGhlbnRpY2F0aW9uLmF1ZGl0aW5nKTtcclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHt1c2VybmFtZTogd3guZ2V0U3RvcmFnZVN5bmMoVVNFUl9OQU1FKX0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgY2xpY2tBdmF0b3IoKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItY29uc3RcclxuICAgICAgICAgICAgbGV0IHtjb3VudCwgdGltZSwgaGFzQ29tbW9kaXR5fSA9IHRoaXMuZGF0YTtcclxuICAgICAgICAgICAgaWYoIWhhc0NvbW1vZGl0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGlmKG5vdyAtIHRpbWUgPj0gNTAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kYXRhLnRpbWUgPSBub3c7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5jb3VudCA9ICsrY291bnQ7XHJcbiAgICAgICAgICAgIGNvdW50ID49IDUgJiYgdGhpcy5hdXRoZW50aWNhdGlvbigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXV0aGVudGljYXRpb24oKSB7XHJcbiAgICAgICAgICAgIHd4LnNob3dNb2RhbCh7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAn55Sz6K+35oiQ5Li656S+5Yy6566h55CG5ZGYPycsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoe2NvbmZpcm19KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoY29uZmlybSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0KHt1cmw6ICcvYXBpL3VzZXIvY29tbXVuaXR5QXV0aG9yaXphdGlvbid9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gd3guc2hvd1RvYXN0KHt0aXRsZTogJ+eUs+ivt+aIkOWKnyd9KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMuc2V0RGF0YSh7aGFzQ29tbW9kaXR5OiBmYWxzZX0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGNvbnNvbGUubG9nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHRoaXMuZGF0YS5jb3VudCA9IHRoaXMuZGF0YS50aW1lID0gMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluaXRJbmZvVmFsdWUoKSB7XHJcbiAgICAgICAgICAgIC8vIOWFs+azqOaVsFxyXG4gICAgICAgICAgICByZXF1ZXN0PElNZXJjaGFudFtdPih7IHVybDogJy9hcGkvZm9sbG93Jywgbm90U2hvd01zZzogdHJ1ZSB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB0aGlzLnNldERhdGEhKHsgZm9sbG93OiBkYXRhLmxlbmd0aCB9KSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcblxyXG4gICAgICAgICAgICAvLyDmlLbol4/mlbBcclxuICAgICAgICAgICAgUHJvbWlzZS5hbGwoWzAsIDFdLm1hcCh0eXBlID0+XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0PElDb21tb2RpdHlbXSB8IElBY3RpdmVbXT4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy9hcGkvbGlrZScsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogeyB0eXBlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbm90U2hvd01zZzogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4gKHtkYXRhOiBbXX0pKVxyXG4gICAgICAgICAgICApKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKFt7IGRhdGE6IHJlczEgfSwgeyBkYXRhOiByZXMyIH1dKSA9PiB0aGlzLnNldERhdGEhKHsgY29sbGVjdGlvbjogcmVzMS5sZW5ndGggKyByZXMyLmxlbmd0aCB9KSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcblxyXG4gICAgICAgICAgICAvLyDnp6/liIYo5YWs55uKKVxyXG4gICAgICAgICAgICByZXF1ZXN0PElVc2VyPih7IHVybDogJy9hcGkvdXNlcicsIG5vdFNob3dNc2c6IHRydWUgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKCh7IGRhdGE6IHsgaW50ZWdyYWwgfSB9KSA9PiB0aGlzLnNldERhdGEhKHsgaW50ZWdyYWwgfSkpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbiJdfQ==