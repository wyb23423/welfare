"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
Component(({
    externalClasses: ['custom-class'],
    properties: {
        rules: {
            type: Object,
            value: {}
        },
        model: {
            type: Object,
            value: {}
        },
        labelwidth: {
            type: String,
            value: ''
        },
        inline: {
            type: Boolean,
            value: false
        }
    },
    data: {
        fileds: {},
        labelWidth: 0,
        originModel: {},
        id: 0
    },
    attached: function () {
        this.data.originModel = this.data.model;
    },
    relations: {
        '../form_item/form_item': {
            type: 'child',
            linked: function (target) {
                var _a;
                this.data.fileds[target.data.prop || this.data.id++] = target;
                var rules = this.data.rules[target.data.prop];
                if (rules) {
                    if (Array.isArray(rules)) {
                        (_a = target.data.rules).push.apply(_a, rules);
                    }
                    else {
                        target.data.rules.push(rules);
                    }
                    target.setData({ rules: target.data.rules });
                }
            },
            unlinked: function (target) {
                delete this.data.fileds[target.id];
            }
        }
    },
    observers: {
        labelWidth: function (val) {
            if (this.data.labelwidth === 'auto') {
                this.data.fileds.forEach(function (wx) { return wx.setData({ labelwidth: val + 'px' }); });
            }
        }
    },
    methods: {
        valid: function () {
            var _this = this;
            var arr = Object.values(this.data.fileds)
                .map(function (v) { return v.valid(_this.data.model[v.data.prop]); });
            return Promise.all(arr);
        },
        reset: function () {
            Object.values(this.data.fileds).forEach(function (v) { return v.setData({ errMsg: '' }); });
            this.triggerEvent('reset', this.data.originModel, {});
        }
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFnQkEsU0FBUyxDQUFPLENBQUM7SUFDYixlQUFlLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDakMsVUFBVSxFQUFFO1FBQ1IsS0FBSyxFQUFFO1lBQ0gsSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQXFDLEVBQUU7U0FDL0M7UUFDRCxLQUFLLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1o7UUFDRCxVQUFVLEVBQUU7WUFDUixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1o7UUFDRCxNQUFNLEVBQUU7WUFDSixJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxLQUFLO1NBQ2Y7S0FDSjtJQUNELElBQUksRUFBRTtRQUNGLE1BQU0sRUFBZ0MsRUFBRTtRQUN4QyxVQUFVLEVBQUUsQ0FBQztRQUNiLFdBQVcsRUFBRSxFQUFFO1FBQ2YsRUFBRSxFQUFFLENBQUM7S0FDUjtJQUNELFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM1QyxDQUFDO0lBQ0QsU0FBUyxFQUFFO1FBQ1Asd0JBQXdCLEVBQUU7WUFDdEIsSUFBSSxFQUFFLE9BQU87WUFDYixNQUFNLFlBQUMsTUFBTTs7Z0JBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQztnQkFFOUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxLQUFLLEVBQUU7b0JBQ1AsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUN0QixDQUFBLEtBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUEsQ0FBQyxJQUFJLFdBQUksS0FBSyxFQUFFO3FCQUNwQzt5QkFBTTt3QkFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2pDO29CQUVELE1BQU0sQ0FBQyxPQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO2lCQUNqRDtZQUNMLENBQUM7WUFDRCxRQUFRLFlBQUMsTUFBTTtnQkFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QyxDQUFDO1NBQ0o7S0FDSjtJQUNELFNBQVMsRUFBRTtRQUNQLFVBQVUsWUFBQyxHQUFXO1lBQ2xCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUFlLElBQUssT0FBQSxFQUFFLENBQUMsT0FBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUF2QyxDQUF1QyxDQUFDLENBQUM7YUFDMUY7UUFDTCxDQUFDO0tBQ0o7SUFDRCxPQUFPLEVBQUU7UUFDTCxLQUFLO1lBQUwsaUJBS0M7WUFKRyxJQUFNLEdBQUcsR0FBZ0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBRTtpQkFDcEQsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQXJDLENBQXFDLENBQUMsQ0FBQztZQUVyRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELEtBQUs7WUFDWSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE9BQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7WUFDdkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztLQUNKO0NBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtSXRlbSB9IGZyb20gXCIuLi9mb3JtX2l0ZW0vZm9ybV9pdGVtXCI7XHJcblxyXG5leHBvcnQgdHlwZSBSdWxlID0ge1xyXG4gICAgcmVxdWlyZWQ/OiBib29sZWFuO1xyXG4gICAgbWluPzogbnVtYmVyO1xyXG4gICAgbWF4PzogbnVtYmVyO1xyXG4gICAgcmVnZXhwPzogc3RyaW5nO1xyXG4gICAgZnVuYz86ICh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSA9PiBzdHJpbmcgfCBib29sZWFuIHwgdm9pZCB8IFByb21pc2U8c3RyaW5nIHwgYm9vbGVhbiB8IHZvaWQ+O1xyXG4gICAgbWVzc2FnZT86IHN0cmluZztcclxufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRm9ybSBleHRlbmRzIFd4Q29tcG9uZW50IHtcclxuICAgIHZhbGlkKCk6IFByb21pc2U8dHJ1ZT4sXHJcbiAgICByZXNldCgpOiB2b2lkO1xyXG59XHJcblxyXG5Db21wb25lbnQ8Rm9ybT4oKHtcclxuICAgIGV4dGVybmFsQ2xhc3NlczogWydjdXN0b20tY2xhc3MnXSxcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICBydWxlczoge1xyXG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXHJcbiAgICAgICAgICAgIHZhbHVlOiA8eyBbcHJvcDogc3RyaW5nXTogUnVsZSB8IFJ1bGVbXSB9Pnt9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICB0eXBlOiBPYmplY3QsXHJcbiAgICAgICAgICAgIHZhbHVlOiB7fVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGFiZWx3aWR0aDoge1xyXG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5saW5lOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgZmlsZWRzOiA8eyBbazogc3RyaW5nXTogV3hDb21wb25lbnQgfT57fSxcclxuICAgICAgICBsYWJlbFdpZHRoOiAwLFxyXG4gICAgICAgIG9yaWdpbk1vZGVsOiB7fSxcclxuICAgICAgICBpZDogMFxyXG4gICAgfSxcclxuICAgIGF0dGFjaGVkKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YS5vcmlnaW5Nb2RlbCA9IHRoaXMuZGF0YS5tb2RlbDtcclxuICAgIH0sXHJcbiAgICByZWxhdGlvbnM6IHtcclxuICAgICAgICAnLi4vZm9ybV9pdGVtL2Zvcm1faXRlbSc6IHtcclxuICAgICAgICAgICAgdHlwZTogJ2NoaWxkJyxcclxuICAgICAgICAgICAgbGlua2VkKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmZpbGVkc1t0YXJnZXQuZGF0YS5wcm9wIHx8IHRoaXMuZGF0YS5pZCsrXSA9IHRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBydWxlcyA9IHRoaXMuZGF0YS5ydWxlc1t0YXJnZXQuZGF0YS5wcm9wXTtcclxuICAgICAgICAgICAgICAgIGlmIChydWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJ1bGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZGF0YS5ydWxlcy5wdXNoKC4uLnJ1bGVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZGF0YS5ydWxlcy5wdXNoKHJ1bGVzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zZXREYXRhISh7IHJ1bGVzOiB0YXJnZXQuZGF0YS5ydWxlcyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5saW5rZWQodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5kYXRhLmZpbGVkc1t0YXJnZXQuaWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9ic2VydmVyczoge1xyXG4gICAgICAgIGxhYmVsV2lkdGgodmFsOiBudW1iZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5sYWJlbHdpZHRoID09PSAnYXV0bycpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5maWxlZHMuZm9yRWFjaCgod3g6IFd4Q29tcG9uZW50KSA9PiB3eC5zZXREYXRhISh7IGxhYmVsd2lkdGg6IHZhbCArICdweCcgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICB2YWxpZCgpIHtcclxuICAgICAgICAgICAgY29uc3QgYXJyID0gKDxGb3JtSXRlbVtdPk9iamVjdC52YWx1ZXModGhpcy5kYXRhLmZpbGVkcykpXHJcbiAgICAgICAgICAgICAgICAubWFwKHYgPT4gdi52YWxpZCh0aGlzLmRhdGEubW9kZWxbdi5kYXRhLnByb3BdKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoYXJyKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc2V0KCkge1xyXG4gICAgICAgICAgICAoPEZvcm1JdGVtW10+T2JqZWN0LnZhbHVlcyh0aGlzLmRhdGEuZmlsZWRzKSkuZm9yRWFjaCh2ID0+IHYuc2V0RGF0YSEoeyBlcnJNc2c6ICcnIH0pKTtcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoJ3Jlc2V0JywgdGhpcy5kYXRhLm9yaWdpbk1vZGVsLCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KSk7XHJcbiJdfQ==