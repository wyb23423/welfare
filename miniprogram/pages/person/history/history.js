"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("../../../utils/http");
var util_1 = require("../../../utils/util");
var constant_1 = require("../../../constant");
Page({
    data: {
        history: [],
        type: '',
        tabType: 0,
        another: [],
        url: '/pages/activity/details/details'
    },
    onLoad: function (query) {
        this.data.type = query.type;
        var type = "_" + query.type;
        this[type] && this[type]();
        var titles = {
            await: '待参加',
            auditing: '待审核',
            complete: '已参加',
            evaluate: '待评价',
            initiate: '我的发起',
            collection: '我的收藏'
        };
        wx.setNavigationBarTitle({
            title: titles[query.type]
        });
    },
    delete: function (e) {
        var _this = this;
        var index = +e.target.dataset.index;
        var history = this.data.history;
        wx.showModal({
            content: this.data.type === 'collection' ? '取消收藏？' : '删除该活动？',
            success: function (res) {
                if (res.confirm) {
                    if (_this.data.type === 'collection') {
                        return _this._cancelCollect(index);
                    }
                    http_1.request({
                        url: '/api/activity',
                        method: 'DELETE',
                        data: { activityId: history[index].id }
                    })
                        .then(function () {
                        wx.showToast({ title: '删除成功' });
                        history.splice(index, 1);
                        _this.setData({ history: history });
                    })
                        .catch(console.log);
                }
            }
        });
    },
    openEnList: function (e) {
        var index = +e.target.dataset.index;
        var enList = this.selectComponent('#en-list');
        enList.show(this.data.history[index].id);
    },
    ok: function (e) {
        var _this = this;
        var index = +e.target.dataset.index;
        var history = this.data.history;
        http_1.request({ url: '/api/activity/achieve/' + history[index].id })
            .then(function () {
            wx.showToast({ title: '操作成功' });
            history[index].status = constant_1.ActiveStatus.complete;
            _this.setData({ history: history });
        })
            .catch(console.log);
    },
    none: function () {
    },
    switch: function (e) {
        this.data.tabType = +e.target.dataset.type;
        var another = this.data.another;
        this.data.another = this.data.history;
        if (another.length) {
            this.data.history = another;
            return this.setData(this.data);
        }
        this._collection();
    },
    _cancelCollect: function (index) {
        var _this = this;
        var history = this.data.history;
        http_1.request({
            url: '/api/like',
            method: 'DELETE',
            data: {
                targetId: history[index].id,
                type: this.data.tabType
            }
        })
            .then(function () {
            wx.showToast({ title: '取消搜藏成功' });
            history.splice(index, 1);
            _this.setData({ history: history });
        })
            .catch(console.log);
    },
    _await: function () {
        this._request('/api/activity/participation/list/await');
    },
    _auditing: function () {
        this._request('/api/activity/participation/list/auditing');
    },
    _complete: function () {
        this._request('/api/activity/participation/list/complete');
    },
    _evaluate: function () {
        this._request('/api/activity/participation/list/evaluate');
    },
    _initiate: function () {
        this._request('/api/activity/my');
    },
    _collection: function () {
        var _this = this;
        var tabType = this.data.tabType;
        http_1.request({
            url: '/api/like',
            data: { type: tabType }
        })
            .then(function (_a) {
            var data = _a.data;
            return _this.setData({
                history: data.map(util_1.parseData),
                type: _this.data.type,
                tabType: tabType,
                url: tabType ? '' : '/pages/activity/details/details'
            });
        })
            .catch(console.log);
    },
    _request: function (url) {
        var _this = this;
        http_1.request({ url: url })
            .then(function (_a) {
            var data = _a.data;
            return _this.setData({ type: _this.data.type, history: data.map(util_1.parseData) });
        })
            .catch(console.log);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImhpc3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBOEM7QUFDOUMsNENBQWdEO0FBRWhELDhDQUFpRDtBQUlqRCxJQUFJLENBQUM7SUFDRCxJQUFJLEVBQUU7UUFDRixPQUFPLEVBQUUsRUFBaUM7UUFDMUMsSUFBSSxFQUFFLEVBQUU7UUFDUixPQUFPLEVBQUUsQ0FBQztRQUNWLE9BQU8sRUFBK0IsRUFBRTtRQUN4QyxHQUFHLEVBQUUsaUNBQWlDO0tBQ3pDO0lBQ0QsTUFBTSxZQUFDLEtBQWlCO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFFNUIsSUFBTSxJQUFJLEdBQWdCLE1BQUksS0FBSyxDQUFDLElBQU0sQ0FBQztRQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFFM0IsSUFBTSxNQUFNLEdBQVE7WUFDaEIsS0FBSyxFQUFFLEtBQUs7WUFDWixRQUFRLEVBQUUsS0FBSztZQUNmLFFBQVEsRUFBRSxLQUFLO1lBQ2YsUUFBUSxFQUFFLEtBQUs7WUFDZixRQUFRLEVBQUUsTUFBTTtZQUNoQixVQUFVLEVBQUUsTUFBTTtTQUNyQixDQUFDO1FBQ0YsRUFBRSxDQUFDLHFCQUFxQixDQUFDO1lBQ3JCLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztTQUM1QixDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ0QsTUFBTSxZQUFDLENBQWU7UUFBdEIsaUJBMEJDO1FBekJHLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3RDLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRWxDLEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDVCxP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LENBQUMsT0FBTyxDQUFDO1FBQ2xDLGNBQU8sQ0FBMkI7WUFDOUIsR0FBRyxFQUFFLFdBQVc7WUFDaEIsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRTtTQUMxQixDQUFDO2FBQ0csSUFBSSxDQUFDLFVBQUMsRUFBUTtnQkFBTixjQUFJO1lBQU8sT0FBQSxLQUFJLENBQUMsT0FBUSxDQUFDO2dCQUM5QixPQUFPLEVBQVUsSUFBSyxDQUFDLEdBQUcsQ0FBQyxnQkFBUyxDQUFDO2dCQUNyQyxJQUFJLEVBQUUsS0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJO2dCQUNwQixPQUFPLFNBQUE7Z0JBQ1AsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7YUFDeEQsQ0FBQztRQUxrQixDQUtsQixDQUFDO2FBQ0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBQ0QsUUFBUSxZQUFDLEdBQVc7UUFBcEIsaUJBSUM7UUFIRyxjQUFPLENBQVksRUFBRSxHQUFHLEtBQUEsRUFBRSxDQUFDO2FBQ3RCLElBQUksQ0FBQyxVQUFDLEVBQVE7Z0JBQU4sY0FBSTtZQUFPLE9BQUEsS0FBSSxDQUFDLE9BQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBUyxDQUFDLEVBQUUsQ0FBQztRQUFyRSxDQUFxRSxDQUFDO2FBQ3pGLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi91dGlscy9odHRwJztcclxuaW1wb3J0IHsgcGFyc2VEYXRhIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XHJcbmltcG9ydCB7IEVuTGlzdCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvZW5saXN0L2VubGlzdCc7XHJcbmltcG9ydCB7IEFjdGl2ZVN0YXR1cyB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50JztcclxuXHJcbnR5cGUgSGlzdG9yeVR5cGUgPSAnX2F3YWl0JyB8ICdfYXVkaXRpbmcnIHwgJ19jb21wbGV0ZSc7XHJcblxyXG5QYWdlKHtcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBoaXN0b3J5OiBbXSBhcyBBcnJheTxJQWN0aXZlIHwgSUNvbW1vZGl0eT4sXHJcbiAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgdGFiVHlwZTogMCxcclxuICAgICAgICBhbm90aGVyOiA8QXJyYXk8SUFjdGl2ZSB8IElDb21tb2RpdHk+PltdLFxyXG4gICAgICAgIHVybDogJy9wYWdlcy9hY3Rpdml0eS9kZXRhaWxzL2RldGFpbHMnXHJcbiAgICB9LFxyXG4gICAgb25Mb2FkKHF1ZXJ5OiBJQW55T2JqZWN0KSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLnR5cGUgPSBxdWVyeS50eXBlO1xyXG5cclxuICAgICAgICBjb25zdCB0eXBlID0gPEhpc3RvcnlUeXBlPmBfJHtxdWVyeS50eXBlfWA7XHJcbiAgICAgICAgdGhpc1t0eXBlXSAmJiB0aGlzW3R5cGVdKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpdGxlczogYW55ID0ge1xyXG4gICAgICAgICAgICBhd2FpdDogJ+W+heWPguWKoCcsXHJcbiAgICAgICAgICAgIGF1ZGl0aW5nOiAn5b6F5a6h5qC4JyxcclxuICAgICAgICAgICAgY29tcGxldGU6ICflt7Llj4LliqAnLFxyXG4gICAgICAgICAgICBldmFsdWF0ZTogJ+W+heivhOS7tycsXHJcbiAgICAgICAgICAgIGluaXRpYXRlOiAn5oiR55qE5Y+R6LW3JyxcclxuICAgICAgICAgICAgY29sbGVjdGlvbjogJ+aIkeeahOaUtuiXjydcclxuICAgICAgICB9O1xyXG4gICAgICAgIHd4LnNldE5hdmlnYXRpb25CYXJUaXRsZSh7XHJcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZXNbcXVlcnkudHlwZV1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBkZWxldGUoZTogV3hUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSArZS50YXJnZXQuZGF0YXNldC5pbmRleDtcclxuICAgICAgICBjb25zdCBoaXN0b3J5ID0gdGhpcy5kYXRhLmhpc3Rvcnk7XHJcblxyXG4gICAgICAgIHd4LnNob3dNb2RhbCh7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuZGF0YS50eXBlID09PSAnY29sbGVjdGlvbicgPyAn5Y+W5raI5pS26JeP77yfJyA6ICfliKDpmaTor6XmtLvliqjvvJ8nLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAocmVzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzLmNvbmZpcm0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhLnR5cGUgPT09ICdjb2xsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FuY2VsQ29sbGVjdChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnL2FwaS9hY3Rpdml0eScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYWN0aXZpdHlJZDogaGlzdG9yeVtpbmRleF0uaWQgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7IHRpdGxlOiAn5Yig6Zmk5oiQ5YqfJyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpc3Rvcnkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YSEoeyBoaXN0b3J5IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgb3BlbkVuTGlzdChlOiBXeFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9ICtlLnRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG4gICAgICAgIGNvbnN0IGVuTGlzdCA9IDxFbkxpc3Q+dGhpcy5zZWxlY3RDb21wb25lbnQhKCcjZW4tbGlzdCcpO1xyXG5cclxuICAgICAgICBlbkxpc3Quc2hvdyh0aGlzLmRhdGEuaGlzdG9yeVtpbmRleF0uaWQpO1xyXG4gICAgfSxcclxuICAgIG9rKGU6IFd4VG91Y2hFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gK2UudGFyZ2V0LmRhdGFzZXQuaW5kZXg7XHJcbiAgICAgICAgY29uc3QgaGlzdG9yeSA9IDxJQWN0aXZlW10+dGhpcy5kYXRhLmhpc3Rvcnk7XHJcblxyXG4gICAgICAgIHJlcXVlc3QoeyB1cmw6ICcvYXBpL2FjdGl2aXR5L2FjaGlldmUvJyArIGhpc3RvcnlbaW5kZXhdLmlkIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7dGl0bGU6ICfmk43kvZzmiJDlip8nfSk7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5W2luZGV4XS5zdGF0dXMgPSBBY3RpdmVTdGF0dXMuY29tcGxldGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldERhdGEhKHtoaXN0b3J5fSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcbiAgICB9LFxyXG4gICAgbm9uZSgpIHtcclxuICAgICAgICAvL1xyXG4gICAgfSxcclxuICAgIHN3aXRjaChlOiBXeFRvdWNoRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmRhdGEudGFiVHlwZSA9ICtlLnRhcmdldC5kYXRhc2V0LnR5cGU7XHJcbiAgICAgICAgY29uc3QgYW5vdGhlciA9IHRoaXMuZGF0YS5hbm90aGVyO1xyXG4gICAgICAgIHRoaXMuZGF0YS5hbm90aGVyID0gdGhpcy5kYXRhLmhpc3Rvcnk7XHJcblxyXG4gICAgICAgIGlmIChhbm90aGVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuaGlzdG9yeSA9IGFub3RoZXI7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldERhdGEhKHRoaXMuZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb2xsZWN0aW9uKCk7XHJcbiAgICB9LFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgX2NhbmNlbENvbGxlY3QoaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGhpc3RvcnkgPSB0aGlzLmRhdGEuaGlzdG9yeTtcclxuXHJcbiAgICAgICAgcmVxdWVzdCh7XHJcbiAgICAgICAgICAgIHVybDogJy9hcGkvbGlrZScsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIHRhcmdldElkOiBoaXN0b3J5W2luZGV4XS5pZCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuZGF0YS50YWJUeXBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB3eC5zaG93VG9hc3QoeyB0aXRsZTogJ+WPlua2iOaQnOiXj+aIkOWKnycgfSk7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldERhdGEhKHsgaGlzdG9yeSB9KTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGNvbnNvbGUubG9nKTtcclxuICAgIH0sXHJcbiAgICBfYXdhaXQoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdCgnL2FwaS9hY3Rpdml0eS9wYXJ0aWNpcGF0aW9uL2xpc3QvYXdhaXQnKTtcclxuICAgIH0sXHJcbiAgICBfYXVkaXRpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdCgnL2FwaS9hY3Rpdml0eS9wYXJ0aWNpcGF0aW9uL2xpc3QvYXVkaXRpbmcnKTtcclxuICAgIH0sXHJcbiAgICBfY29tcGxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdCgnL2FwaS9hY3Rpdml0eS9wYXJ0aWNpcGF0aW9uL2xpc3QvY29tcGxldGUnKTtcclxuICAgIH0sXHJcbiAgICBfZXZhbHVhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdCgnL2FwaS9hY3Rpdml0eS9wYXJ0aWNpcGF0aW9uL2xpc3QvZXZhbHVhdGUnKTtcclxuICAgIH0sXHJcbiAgICBfaW5pdGlhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5fcmVxdWVzdCgnL2FwaS9hY3Rpdml0eS9teScpO1xyXG4gICAgfSxcclxuICAgIF9jb2xsZWN0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IHRhYlR5cGUgPSB0aGlzLmRhdGEudGFiVHlwZTtcclxuICAgICAgICByZXF1ZXN0PElDb21tb2RpdHlbXSB8IElBY3RpdmVbXT4oe1xyXG4gICAgICAgICAgICB1cmw6ICcvYXBpL2xpa2UnLFxyXG4gICAgICAgICAgICBkYXRhOiB7IHR5cGU6IHRhYlR5cGUgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gdGhpcy5zZXREYXRhISh7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5OiAoPGFueVtdPmRhdGEpLm1hcChwYXJzZURhdGEpLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5kYXRhLnR5cGUsXHJcbiAgICAgICAgICAgICAgICB0YWJUeXBlLFxyXG4gICAgICAgICAgICAgICAgdXJsOiB0YWJUeXBlID8gJycgOiAnL3BhZ2VzL2FjdGl2aXR5L2RldGFpbHMvZGV0YWlscydcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcbiAgICB9LFxyXG4gICAgX3JlcXVlc3QodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICByZXF1ZXN0PElBY3RpdmVbXT4oeyB1cmwgfSlcclxuICAgICAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB0aGlzLnNldERhdGEhKHsgdHlwZTogdGhpcy5kYXRhLnR5cGUsIGhpc3Rvcnk6IGRhdGEubWFwKHBhcnNlRGF0YSkgfSkpXHJcbiAgICAgICAgICAgIC5jYXRjaChjb25zb2xlLmxvZyk7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=