"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
Component({
    properties: {
        value: {
            type: Number,
            value: -1
        },
        layout: {
            type: String,
            value: 'year, month, day, hours, minutes'
        },
    },
    data: {
        range: [],
        selected: [0, 0, 0, 0, 0, 0],
        timeStr: ''
    },
    ready: function () {
        var value = this.data.value;
        if (value == null || value < 0) {
            var now = Date.now();
            this.triggerEvent('input', { value: now }, {});
        }
    },
    methods: {
        onChange: function (_a) {
            var value = _a.detail.value;
            var _b = this.data, range = _b.range, layout = _b.layout;
            var date = new Date();
            range.forEach(function (v, i) {
                var selected = v[value[i]];
                var _a = selected.match(/(\d+)([^\d]){1}/), num = _a[1], unit = _a[2];
                switch (unit) {
                    case '年':
                        date.setFullYear(+num);
                        break;
                    case '月':
                        date.setMonth(+num - 1);
                        break;
                    case '日':
                        date.setDate(+num);
                        break;
                    case '时':
                        date.setHours(+num);
                        break;
                    case '分':
                        date.setMinutes(+num);
                        break;
                    case '秒':
                        date.setSeconds(+num);
                        break;
                    default:
                }
            });
            var time = date.getTime();
            this.setData({ timeStr: util_1.formatTime(layout, time) });
            this.triggerEvent('input', { value: time }, {});
        }
    },
    observers: {
        value: function (time) {
            if (time < 0) {
                return;
            }
            var layout = this.data.layout;
            var range = util_1.getLayoutData(layout, time);
            this.setData({
                range: range,
                selected: util_1.calcSelIndex(range, time),
                timeStr: util_1.formatTime(layout, time)
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZV90aW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGF0ZV90aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEsK0JBQWlFO0FBY2pFLFNBQVMsQ0FBVztJQUNoQixVQUFVLEVBQUU7UUFDUixLQUFLLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDWjtRQUNELE1BQU0sRUFBRTtZQUNKLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLGtDQUFrQztTQUM1QztLQUNKO0lBQ0QsSUFBSSxFQUFFO1FBQ0YsS0FBSyxFQUFFLEVBQUU7UUFDVCxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixPQUFPLEVBQUUsRUFBRTtLQUNkO0lBQ0QsS0FBSztRQUNELElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlCLElBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBRSxHQUFHLEVBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNoRDtJQUNMLENBQUM7SUFDRCxPQUFPLEVBQUU7UUFDTCxRQUFRLFlBQUMsRUFBNEI7Z0JBQWxCLHVCQUFLO1lBQ2QsSUFBQSxjQUEyQixFQUExQixnQkFBSyxFQUFFLGtCQUFtQixDQUFDO1lBRWxDLElBQU0sSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7WUFDeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNmLElBQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsSUFBQSxzQ0FBMkQsRUFBeEQsV0FBRyxFQUFFLFlBQW1ELENBQUM7Z0JBRWxFLFFBQVEsSUFBSSxFQUFFO29CQUNWLEtBQUssR0FBRzt3QkFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQUMsTUFBTTtvQkFDeEMsS0FBSyxHQUFHO3dCQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7d0JBQUMsTUFBTTtvQkFDekMsS0FBSyxHQUFHO3dCQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFBQyxNQUFNO29CQUNwQyxLQUFLLEdBQUc7d0JBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUFDLE1BQU07b0JBQ3JDLEtBQUssR0FBRzt3QkFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQUMsTUFBTTtvQkFDdkMsS0FBSyxHQUFHO3dCQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFBQyxNQUFNO29CQUN2QyxRQUFRO2lCQUNYO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFDLE9BQU8sRUFBRSxpQkFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUM7WUFFbEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEQsQ0FBQztLQUNKO0lBQ0QsU0FBUyxFQUFFO1FBQ1AsS0FBSyxZQUFDLElBQVk7WUFDZCxJQUFHLElBQUksR0FBRyxDQUFDLEVBQUU7Z0JBQ1QsT0FBTzthQUNWO1lBRUQsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDaEMsSUFBTSxLQUFLLEdBQUcsb0JBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDVCxLQUFLLE9BQUE7Z0JBQ0wsUUFBUSxFQUFFLG1CQUFZLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQztnQkFDbkMsT0FBTyxFQUFFLGlCQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQzthQUNwQyxDQUFDLENBQUM7UUFDUCxDQUFDO0tBQ0o7Q0FDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5pel5pyf5pe26Ze06YCJ5oup5ZmoXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZ2V0TGF5b3V0RGF0YSwgY2FsY1NlbEluZGV4LCBmb3JtYXRUaW1lIH0gZnJvbSAnLi91dGlsJztcclxuXHJcbmludGVyZmFjZSBJRGF0ZVRpbWVEYXRhIHtcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbiAgICBsYXlvdXQ6IHN0cmluZztcclxuICAgIHJhbmdlOiBzdHJpbmdbXVtdO1xyXG4gICAgdGltZVN0cjogc3RyaW5nO1xyXG4gICAgc2VsZWN0ZWQ6IG51bWJlcltdO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRGF0ZVRpbWUgZXh0ZW5kcyBXeENvbXBvbmVudCB7XHJcbiAgICBkYXRhOiBJRGF0ZVRpbWVEYXRhO1xyXG59XHJcblxyXG5Db21wb25lbnQ8RGF0ZVRpbWU+KHtcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICAgICAgICAgIHZhbHVlOiAtMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGF5b3V0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgdmFsdWU6ICd5ZWFyLCBtb250aCwgZGF5LCBob3VycywgbWludXRlcydcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICByYW5nZTogW10sXHJcbiAgICAgICAgc2VsZWN0ZWQ6IFswLCAwLCAwLCAwLCAwLCAwXSxcclxuICAgICAgICB0aW1lU3RyOiAnJ1xyXG4gICAgfSxcclxuICAgIHJlYWR5KCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhLnZhbHVlO1xyXG4gICAgICAgIGlmKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPCAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KCdpbnB1dCcsIHt2YWx1ZTogbm93fSwge30pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgb25DaGFuZ2Uoe2RldGFpbDoge3ZhbHVlfX06IEJhc2VFdmVudCkge1xyXG4gICAgICAgICAgICBjb25zdCB7cmFuZ2UsIGxheW91dH0gPSB0aGlzLmRhdGE7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgcmFuZ2UuZm9yRWFjaCgodiwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB2W3ZhbHVlW2ldXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFssIG51bSwgdW5pdF0gPSA8c3RyaW5nW10+c2VsZWN0ZWQubWF0Y2goLyhcXGQrKShbXlxcZF0pezF9Lyk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh1bml0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn5bm0JzogZGF0ZS5zZXRGdWxsWWVhcigrbnVtKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn5pyIJzogZGF0ZS5zZXRNb250aCgrbnVtIC0gMSk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+aXpSc6IGRhdGUuc2V0RGF0ZSgrbnVtKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn5pe2JzogZGF0ZS5zZXRIb3VycygrbnVtKTsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn5YiGJzogZGF0ZS5zZXRNaW51dGVzKCtudW0pOyBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICfnp5InOiBkYXRlLnNldFNlY29uZHMoK251bSk7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lID0gZGF0ZS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGF0YSh7dGltZVN0cjogZm9ybWF0VGltZShsYXlvdXQsIHRpbWUpfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudCgnaW5wdXQnLCB7IHZhbHVlOiB0aW1lIH0sIHt9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZXJzOiB7XHJcbiAgICAgICAgdmFsdWUodGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmKHRpbWUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxheW91dCA9IHRoaXMuZGF0YS5sYXlvdXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZ2V0TGF5b3V0RGF0YShsYXlvdXQsIHRpbWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICAgICAgICAgIHJhbmdlLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGNhbGNTZWxJbmRleChyYW5nZSwgdGltZSksXHJcbiAgICAgICAgICAgICAgICB0aW1lU3RyOiBmb3JtYXRUaW1lKGxheW91dCwgdGltZSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIl19