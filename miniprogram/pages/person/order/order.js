"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("../../../utils/http");
Page({
    data: {
        list: [],
        isShow: false,
        index: 0
    },
    close: function () {
        this.setData({ isShow: false });
    },
    onShow: function () {
        var _this = this;
        http_1.request({ url: '/api/commodity/participation/merchant/list' })
            .then(function (_a) {
            var list = _a.data.list;
            return _this.setData({ list: list });
        })
            .catch(console.log);
    },
    openConfirm: function (_a) {
        var index = _a.target.dataset.index;
        this.setData({ isShow: true, index: index });
    },
    doConfirm: function (e) {
        var _this = this;
        var flag = !!e.target.dataset.ok;
        var index = e.currentTarget.dataset.index;
        var orders = this.data.list[this.data.index].orders;
        wx.showModal({
            title: orders[index].userId,
            content: (!flag ? '拒绝' : '确认') + '订单?',
            success: function (_a) {
                var confirm = _a.confirm;
                return confirm && _this._confirm(flag, orders, index);
            }
        });
    },
    _confirm: function (flag, orders, index) {
        http_1.request({
            url: '/api/commodity/participation/confirm',
            method: 'POST',
            data: {
                commodityId: orders[index].id,
                confirm: flag
            }
        })
            .then(this.callback.bind(this, orders, index))
            .catch(console.log);
    },
    callback: function (orders, index) {
        wx.showToast({ title: '操作成功' });
        orders.splice(index, 1);
        if (!orders.length) {
            this.data.isShow = false;
            this.data.list.splice(this.data.index, 1);
        }
        this.setData(this.data);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvcmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDRDQUE4QztBQWtCOUMsSUFBSSxDQUFDO0lBQ0QsSUFBSSxFQUFFO1FBQ0YsSUFBSSxFQUFxQixFQUFFO1FBQzNCLE1BQU0sRUFBRSxLQUFLO1FBQ2IsS0FBSyxFQUFFLENBQUM7S0FDWDtJQUNELEtBQUs7UUFDRCxJQUFJLENBQUMsT0FBUSxDQUFDLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELE1BQU07UUFBTixpQkFJQztRQUhHLGNBQU8sQ0FBbUIsRUFBQyxHQUFHLEVBQUUsNENBQTRDLEVBQUMsQ0FBQzthQUN6RSxJQUFJLENBQUMsVUFBQyxFQUFjO2dCQUFOLG1CQUFJO1lBQU8sT0FBQSxLQUFJLENBQUMsT0FBUSxDQUFDLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBQztRQUFyQixDQUFxQixDQUFDO2FBQy9DLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNELFdBQVcsWUFBQyxFQUF3RDtZQUFwQywrQkFBSztRQUNqQyxJQUFJLENBQUMsT0FBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUNELFNBQVMsWUFBQyxDQUE0QztRQUF0RCxpQkFXQztRQVZHLElBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDbkMsSUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBRTVDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBRXRELEVBQUUsQ0FBQyxTQUFTLENBQUM7WUFDVCxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU07WUFDM0IsT0FBTyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSztZQUN0QyxPQUFPLEVBQUUsVUFBQyxFQUFTO29CQUFSLG9CQUFPO2dCQUFNLE9BQUEsT0FBTyxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUM7WUFBN0MsQ0FBNkM7U0FDeEUsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELFFBQVEsWUFBQyxJQUFhLEVBQUUsTUFBZ0IsRUFBRSxLQUFhO1FBQ25ELGNBQU8sQ0FBQztZQUNKLEdBQUcsRUFBRSxzQ0FBc0M7WUFDM0MsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUU7Z0JBQ0YsV0FBVyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixPQUFPLEVBQUUsSUFBSTthQUNoQjtTQUNKLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQzthQUM3QyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxRQUFRLFlBQUMsTUFBZ0IsRUFBRSxLQUFhO1FBQ3BDLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV4QixJQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDN0M7UUFDRCxJQUFJLENBQUMsT0FBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVxdWVzdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2h0dHAnO1xyXG5cclxuaW50ZXJmYWNlIElHb29kc1dpdGhPcmRlciB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgaW1nOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBzaXplOiBudW1iZXI7XHJcbiAgICBvcmRlcnM6IElPcmRlcltdO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSU9yZGVyIHtcclxuICAgIGNvbW1vZGl0eUlkOiBudW1iZXI7XHJcbiAgICBjcmVhdGVkOiBudW1iZXI7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgc3RhdHVzOiBudW1iZXI7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxufVxyXG5cclxuUGFnZSh7XHJcbiAgICBkYXRhOiB7XHJcbiAgICAgICAgbGlzdDogPElHb29kc1dpdGhPcmRlcltdPltdLFxyXG4gICAgICAgIGlzU2hvdzogZmFsc2UsXHJcbiAgICAgICAgaW5kZXg6IDBcclxuICAgIH0sXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLnNldERhdGEhKHtpc1Nob3c6IGZhbHNlfSk7XHJcbiAgICB9LFxyXG4gICAgb25TaG93KCkge1xyXG4gICAgICAgIHJlcXVlc3Q8UGFnZURhdGE8SU9yZGVyPj4oe3VybDogJy9hcGkvY29tbW9kaXR5L3BhcnRpY2lwYXRpb24vbWVyY2hhbnQvbGlzdCd9KVxyXG4gICAgICAgICAgICAudGhlbigoe2RhdGE6IHtsaXN0fX0pID0+IHRoaXMuc2V0RGF0YSEoe2xpc3R9KSlcclxuICAgICAgICAgICAgLmNhdGNoKGNvbnNvbGUubG9nKTtcclxuICAgIH0sXHJcbiAgICBvcGVuQ29uZmlybSh7dGFyZ2V0OiB7ZGF0YXNldDoge2luZGV4fX19OiBCYXNlRXZlbnQ8e2luZGV4OiBudW1iZXJ9Pikge1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSEoeyBpc1Nob3c6IHRydWUsIGluZGV4fSk7XHJcbiAgICB9LFxyXG4gICAgZG9Db25maXJtKGU6IEJhc2VFdmVudDx7b2s/OiBzdHJpbmd9LCB7aW5kZXg6IG51bWJlcn0+KSB7XHJcbiAgICAgICAgY29uc3QgZmxhZyA9ICEhZS50YXJnZXQuZGF0YXNldC5vaztcclxuICAgICAgICBjb25zdCBpbmRleCA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmluZGV4O1xyXG5cclxuICAgICAgICBjb25zdCBvcmRlcnMgPSB0aGlzLmRhdGEubGlzdFt0aGlzLmRhdGEuaW5kZXhdLm9yZGVycztcclxuXHJcbiAgICAgICAgd3guc2hvd01vZGFsKHtcclxuICAgICAgICAgICAgdGl0bGU6IG9yZGVyc1tpbmRleF0udXNlcklkLFxyXG4gICAgICAgICAgICBjb250ZW50OiAoIWZsYWcgPyAn5ouS57udJyA6ICfnoa7orqQnKSArICforqLljZU/JyxcclxuICAgICAgICAgICAgc3VjY2VzczogKHtjb25maXJtfSkgPT4gY29uZmlybSAmJiB0aGlzLl9jb25maXJtKGZsYWcsIG9yZGVycywgaW5kZXgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgX2NvbmZpcm0oZmxhZzogYm9vbGVhbiwgb3JkZXJzOiBJT3JkZXJbXSwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHJlcXVlc3Qoe1xyXG4gICAgICAgICAgICB1cmw6ICcvYXBpL2NvbW1vZGl0eS9wYXJ0aWNpcGF0aW9uL2NvbmZpcm0nLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgY29tbW9kaXR5SWQ6IG9yZGVyc1tpbmRleF0uaWQsXHJcbiAgICAgICAgICAgICAgICBjb25maXJtOiBmbGFnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHRoaXMuY2FsbGJhY2suYmluZCh0aGlzLCBvcmRlcnMsIGluZGV4KSlcclxuICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xyXG4gICAgfSxcclxuICAgIGNhbGxiYWNrKG9yZGVyczogSU9yZGVyW10sIGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB3eC5zaG93VG9hc3Qoe3RpdGxlOiAn5pON5L2c5oiQ5YqfJyB9KTtcclxuICAgICAgICBvcmRlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHJcbiAgICAgICAgaWYoIW9yZGVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLmlzU2hvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEubGlzdC5zcGxpY2UodGhpcy5kYXRhLmluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXREYXRhISh0aGlzLmRhdGEpO1xyXG4gICAgfVxyXG59KTtcclxuIl19