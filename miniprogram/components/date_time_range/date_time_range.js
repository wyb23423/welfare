"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
Component({
    properties: {
        value: {
            type: Array,
            value: []
        },
        layout: {
            type: String,
            value: 'year, month, day, hours, minutes'
        },
        selectedIndex: {
            type: Array,
            value: [0, 0, 0, 0, 0, 0]
        }
    },
    data: {
        visible: false,
        progress: 0,
        scrollTop: [],
        px2rpxRatio: 2,
        timer: null,
        setTop: false,
        date: [],
        layoutData: []
    },
    attached: function () {
        var _this = this;
        this.triggerEvent('input', { value: this._fillValue() }, {});
        wx.getSystemInfo({ success: function (res) { return _this.data.px2rpxRatio = 750 / res.windowWidth; } });
    },
    methods: {
        switchPicker: function () {
            var visible = !this.data.visible;
            this.setData({
                visible: visible,
                progress: 0
            });
            this.triggerEvent('mask', { visible: visible }, {});
        },
        none: function () {
        },
        go: function () {
            if (!this.data.progress) {
                this.ok();
            }
            else {
                this.setData({ progress: 0 });
            }
        },
        ok: function () {
            var _this = this;
            var date = new Date();
            this.data.layoutData.forEach(function (v, i) {
                var selected = v[_this.data.selectedIndex[i]];
                var _a = selected.match(/(\d+)([^\d]){1}/), num = _a[1], unit = _a[2];
                switch (unit) {
                    case '年':
                        date.setFullYear(+num);
                        break;
                    case '月':
                        date.setMonth(+num - 1);
                        break;
                    case '日':
                        date.setDate(+num);
                        break;
                    case '时':
                        date.setHours(+num);
                        break;
                    case '分':
                        date.setMinutes(+num);
                        break;
                    case '秒':
                        date.setSeconds(+num);
                        break;
                    default:
                }
            });
            var value = this.data.value;
            value[this.data.progress] = date.getTime();
            if (this.data.progress) {
                this.data.value = value = value.filter(function (v) { return !!v; }).sort(function (a, b) { return a - b; });
                this.switchPicker();
            }
            else {
                this.setData({ progress: 1 });
            }
            this.triggerEvent('input', { value: value }, {});
        },
        scroll: function (e) {
            var _a;
            if (this.data.setTop) {
                return this.data.setTop = false;
            }
            var itemIndex = e.target.dataset.index;
            var index = Math.round(e.detail.scrollTop / 64 * this.data.px2rpxRatio);
            this.setData((_a = {},
                _a["selectedIndex[" + itemIndex + "]"] = index,
                _a));
        },
        setScrollIndex: function (e) {
            var _a;
            var itemIndex = e.target.dataset.index;
            if (itemIndex != null) {
                var index = e.currentTarget.dataset.index;
                this.setData((_a = {},
                    _a["selectedIndex[" + index + "]"] = itemIndex,
                    _a));
            }
        },
        _fillValue: function (value) {
            value = (value || this.data.value).filter(function (v) { return !!v; });
            while (value.length < 2) {
                value.push(Date.now());
            }
            return value.sort(function (a, b) { return a - b; });
        }
    },
    observers: {
        'selectedIndex.**': function (val) {
            var _this = this;
            if (this.data.timer) {
                clearTimeout(this.data.timer);
                this.data.timer = null;
            }
            this.data.timer = setTimeout(function () {
                _this.data.setTop = true;
                _this.setData({ scrollTop: val.map(function (v) { return v * 64; }) });
            }, 100);
        },
        'value.**, progress, layout': function (value, progress, layout) {
            this.data.value = value = this._fillValue(value);
            var date = value.map(function (v) { return util_1.formatTime(layout, v); });
            var layoutData = util_1.getLayoutData(layout, value[progress]);
            this.setData({
                date: date, layoutData: layoutData,
                selectedIndex: util_1.calcSelIndex(layoutData, value[progress])
            });
        }
    }
});
//# sourceMappingURL=data:application/json;base64,