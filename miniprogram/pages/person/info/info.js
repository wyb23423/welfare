"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("../../../utils/http");
Page({
    data: {
        form: {
            address: '',
            idCard: '',
            phone: '',
            realName: '',
            code: '',
            email: ''
        },
        idCardRule: {
            regexp: String.raw(templateObject_1 || (templateObject_1 = __makeTemplateObject(["^[1-9]d{7}((0d)|(1[0-2]))(([0|1|2]d)|3[0-1])d{3}$|^[1-9]d{5}[1-9]d{3}((0d)|(1[0-2]))(([0|1|2]d)|3[0-1])d{3}([0-9]|X)$"], ["^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$|^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$"]))),
            message: '无效身份证号'
        },
        canGetCode: true,
        codeBtnText: '获取验证码',
        notGetInfo: false
    },
    onLoad: function (query) {
        var _this = this;
        if (!(query && query.notGetInfo)) {
            http_1.request({ url: '/api/user' })
                .then(function (_a) {
                var data = _a.data;
                _this.setData(Object.keys(_this.data.form).reduce(function (form, k) {
                    if (k !== 'code') {
                        form["form." + k] = data[k];
                    }
                    return form;
                }, {}));
            })
                .then(console.log);
        }
        else {
            this.data.notGetInfo = true;
        }
    },
    onInput: function (e) {
        var _a;
        this.setData((_a = {}, _a["form." + e.target.id] = e.detail.value, _a));
    },
    getCode: function () {
        console.log('getCode');
    },
    save: function () {
        var _this = this;
        var arr = Object.entries(this.data.form).map(function (_a) {
            var id = _a[0], value = _a[1];
            var input = _this.selectComponent('#' + id);
            if (input) {
                return input.valid(value);
            }
            else {
                return true;
            }
        });
        Promise.all(arr)
            .then(function () { return (http_1.request({
            url: '/api/user',
            method: 'POST',
            data: _this.data.form
        })); })
            .then(function () { return new Promise(function (resolve) {
            wx.showToast({
                title: '修改个人信息成功',
                complete: function () { return resolve(_this.data.notGetInfo); }
            });
        }); })
            .then(function (notGetInfo) { return notGetInfo && wx.reLaunch({ url: '/pages/index/index' }); })
            .catch(console.log);
        this.setData({ 'form.code': '' });
    },
});
var templateObject_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBSUEsNENBQThDO0FBRTlDLElBQUksQ0FBQztJQUNELElBQUksRUFBRTtRQUNGLElBQUksRUFBRTtZQUNGLE9BQU8sRUFBRSxFQUFFO1lBQ1gsTUFBTSxFQUFFLEVBQUU7WUFDVixLQUFLLEVBQUUsRUFBRTtZQUNULFFBQVEsRUFBRSxFQUFFO1lBQ1osSUFBSSxFQUFFLEVBQUU7WUFDUixLQUFLLEVBQUUsRUFBRTtTQUNaO1FBQ0QsVUFBVSxFQUFFO1lBQ1IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLDBMQUFBLHlJQUFnSSxJQUFBO1lBQ2xKLE9BQU8sRUFBRSxRQUFRO1NBQ3BCO1FBQ0QsVUFBVSxFQUFFLElBQUk7UUFDaEIsV0FBVyxFQUFFLE9BQU87UUFDcEIsVUFBVSxFQUFFLEtBQUs7S0FDcEI7SUFDRCxNQUFNLFlBQUMsS0FBa0I7UUFBekIsaUJBcUJDO1FBcEJHLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDOUIsY0FBTyxDQUFRLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxDQUFDO2lCQUMvQixJQUFJLENBQUMsVUFBQyxFQUFRO29CQUFOLGNBQUk7Z0JBQ1QsS0FBSSxDQUFDLE9BQVEsQ0FDVCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUM5QixVQUFDLElBQUksRUFBRSxDQUFDO29CQUNKLElBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRTt3QkFDZCxJQUFJLENBQUMsVUFBUSxDQUFHLENBQUMsR0FBZ0IsSUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUM3QztvQkFFRCxPQUFPLElBQUksQ0FBQztnQkFDaEIsQ0FBQyxFQUNXLEVBQUUsQ0FDakIsQ0FDSixDQUFDO1lBQ04sQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDMUI7YUFBTTtZQUNILElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUMvQjtJQUNMLENBQUM7SUFDRCxPQUFPLFlBQUMsQ0FBWTs7UUFDaEIsSUFBSSxDQUFDLE9BQVEsV0FBRyxHQUFDLFVBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFJLElBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLE1BQUcsQ0FBQztJQUMvRCxDQUFDO0lBQ0QsT0FBTztRQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUNELElBQUk7UUFBSixpQkE2QkM7UUE1QkcsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxFQUFXO2dCQUFWLFVBQUUsRUFBRSxhQUFLO1lBQ3ZFLElBQU0sS0FBSyxHQUFrQixLQUFJLENBQUMsZUFBZ0IsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFFN0QsSUFBSSxLQUFLLEVBQUU7Z0JBQ1AsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzdCO2lCQUFNO2dCQUNILE9BQU8sSUFBSSxDQUFDO2FBQ2Y7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2FBQ1gsSUFBSSxDQUFDLGNBQU0sT0FBQSxDQUNSLGNBQU8sQ0FBQztZQUNKLEdBQUcsRUFBRSxXQUFXO1lBQ2hCLE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLEtBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtTQUN2QixDQUFDLENBQ0wsRUFOVyxDQU1YLENBQUM7YUFDRCxJQUFJLENBQUMsY0FBTSxPQUFBLElBQUksT0FBTyxDQUFDLFVBQUEsT0FBTztZQUMzQixFQUFFLENBQUMsU0FBUyxDQUFDO2dCQUNULEtBQUssRUFBRSxVQUFVO2dCQUNqQixRQUFRLEVBQUUsY0FBTSxPQUFBLE9BQU8sQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUE3QixDQUE2QjthQUNoRCxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsRUFMVSxDQUtWLENBQUM7YUFDRixJQUFJLENBQUMsVUFBQSxVQUFVLElBQUksT0FBQSxVQUFVLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxDQUFDLEVBQXhELENBQXdELENBQUM7YUFDNUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsT0FBUSxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiDkv67mlLnkuKrkurrkv6Hmga9cclxuICovXHJcbmltcG9ydCB7IElucHV0QmVoYXZpb3IgfSBmcm9tICcuLi8uLi8uLi9iZWhhdmlvci9pbnB1dCc7XHJcbmltcG9ydCB7IHJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi91dGlscy9odHRwJztcclxuXHJcblBhZ2Uoe1xyXG4gICAgZGF0YToge1xyXG4gICAgICAgIGZvcm06IHtcclxuICAgICAgICAgICAgYWRkcmVzczogJycsXHJcbiAgICAgICAgICAgIGlkQ2FyZDogJycsXHJcbiAgICAgICAgICAgIHBob25lOiAnJyxcclxuICAgICAgICAgICAgcmVhbE5hbWU6ICcnLFxyXG4gICAgICAgICAgICBjb2RlOiAnJyxcclxuICAgICAgICAgICAgZW1haWw6ICcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpZENhcmRSdWxlOiB7XHJcbiAgICAgICAgICAgIHJlZ2V4cDogU3RyaW5nLnJhd2BeWzEtOV1cXGR7N30oKDBcXGQpfCgxWzAtMl0pKSgoWzB8MXwyXVxcZCl8M1swLTFdKVxcZHszfSR8XlsxLTldXFxkezV9WzEtOV1cXGR7M30oKDBcXGQpfCgxWzAtMl0pKSgoWzB8MXwyXVxcZCl8M1swLTFdKVxcZHszfShbMC05XXxYKSRgLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAn5peg5pWI6Lqr5Lu96K+B5Y+3J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2FuR2V0Q29kZTogdHJ1ZSxcclxuICAgICAgICBjb2RlQnRuVGV4dDogJ+iOt+WPlumqjOivgeeggScsXHJcbiAgICAgICAgbm90R2V0SW5mbzogZmFsc2VcclxuICAgIH0sXHJcbiAgICBvbkxvYWQocXVlcnk/OiBJQW55T2JqZWN0KSB7XHJcbiAgICAgICAgaWYgKCEocXVlcnkgJiYgcXVlcnkubm90R2V0SW5mbykpIHtcclxuICAgICAgICAgICAgcmVxdWVzdDxJVXNlcj4oeyB1cmw6ICcvYXBpL3VzZXInIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERhdGEhKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmRhdGEuZm9ybSkucmVkdWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZvcm0sIGspID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoayAhPT0gJ2NvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1bYGZvcm0uJHtrfWBdID0gKDxJQW55T2JqZWN0PmRhdGEpW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElBbnlPYmplY3Q+e31cclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oY29uc29sZS5sb2cpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS5ub3RHZXRJbmZvID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25JbnB1dChlOiBCYXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnNldERhdGEhKHsgW2Bmb3JtLiR7ZS50YXJnZXQuaWR9YF06IGUuZGV0YWlsLnZhbHVlIH0pO1xyXG4gICAgfSxcclxuICAgIGdldENvZGUoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2dldENvZGUnKTtcclxuICAgIH0sXHJcbiAgICBzYXZlKCkge1xyXG4gICAgICAgIGNvbnN0IGFyciA9IE9iamVjdC5lbnRyaWVzPHN0cmluZyB8IG51bWJlcj4odGhpcy5kYXRhLmZvcm0pLm1hcCgoW2lkLCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5wdXQgPSA8SW5wdXRCZWhhdmlvcj50aGlzLnNlbGVjdENvbXBvbmVudCEoJyMnICsgaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQudmFsaWQodmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgUHJvbWlzZS5hbGwoYXJyKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiAoXHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICcvYXBpL3VzZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YS5mb3JtXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgIHd4LnNob3dUb2FzdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfkv67mlLnkuKrkurrkv6Hmga/miJDlip8nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiByZXNvbHZlKHRoaXMuZGF0YS5ub3RHZXRJbmZvKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICAudGhlbihub3RHZXRJbmZvID0+IG5vdEdldEluZm8gJiYgd3gucmVMYXVuY2goeyB1cmw6ICcvcGFnZXMvaW5kZXgvaW5kZXgnIH0pKVxyXG4gICAgICAgICAgICAuY2F0Y2goY29uc29sZS5sb2cpO1xyXG5cclxuICAgICAgICB0aGlzLnNldERhdGEhKHsgJ2Zvcm0uY29kZSc6ICcnIH0pO1xyXG4gICAgfSxcclxufSk7XHJcbiJdfQ==