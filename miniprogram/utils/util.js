"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../constant/index");
var http_1 = require("./http");
var status_1 = require("../constant/status");
function formatTime(date) {
    var _a = resolveTime(date), year = _a.year, month = _a.month, day = _a.day, hour = _a.hour, minute = _a.minute;
    return [year, month, day].map(formatNumber).join('/') + ' ' + [hour, minute].map(formatNumber).join(':');
}
exports.formatTime = formatTime;
function resolveTime(time) {
    var date = time instanceof Date ? time : new Date(time);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    return { year: year, month: month, day: day, hour: hour, minute: minute };
}
exports.resolveTime = resolveTime;
function getOptions(path) {
    var page = getCurrentPages().pop();
    if (!(page && page.route === path)) {
        return wx.showModal({
            title: '非法访问',
            content: '路由参数错误，即将返回主页',
            showCancel: false,
            complete: function () {
                wx.reLaunch({ url: '/pages/index/index' });
            }
        });
    }
    return page.options || {};
}
exports.getOptions = getOptions;
function parseData(v, i) {
    if (i === void 0) { i = 0; }
    v.authStr = Reflect.get(index_1.AUTHENTICATION, v.authentication) || '未认证';
    v.originImg = v.img;
    v.img = v.img + '?thumb=true';
    v.sign = v.attended || v.sign || 0;
    v.size = v.size || 0;
    v.index = i;
    v.isCollected = !!v.liked;
    return v;
}
exports.parseData = parseData;
function upload(newSrc, oldSrc) {
    if (!newSrc) {
        console.warn('文件路径不能为空');
        return Promise.resolve(null);
    }
    if (oldSrc === newSrc) {
        return Promise.resolve(null);
    }
    return http_1.uploadFile({
        url: '/api/file',
        name: 'file',
        filePath: newSrc
    }).then(function (res) { return res.data; });
}
exports.upload = upload;
function updateStatus(component, index) {
    var data = component.data.list[index];
    if (data.status === status_1.GOODS_STATUS.AUDITING) {
        return wx.showToast({ icon: 'none', title: '商品审核中' });
    }
    var isNormal = data.status === status_1.GOODS_STATUS.NORMAL;
    wx.showModal({
        content: (isNormal ? '下' : '上') + '架该商品?',
        success: function (_a) {
            var confirm = _a.confirm;
            if (!confirm) {
                return;
            }
            var status = isNormal ? status_1.GOODS_STATUS.SOLD_OUT : status_1.GOODS_STATUS.NORMAL;
            http_1.request({
                url: '/api/commodity',
                data: { id: data.id, status: status },
                method: 'POST'
            })
                .then(function () {
                var _a;
                return component.setData((_a = {}, _a["list[" + index + "].status"] = status, _a));
            })
                .then(function () { return wx.showToast({ title: '操作成功' }); })
                .catch(console.log);
        }
    });
}
exports.updateStatus = updateStatus;
function deleteGoods(component, index) {
    var list = component.data.list;
    var data = list[index];
    wx.showModal({
        content: '删除该商品?',
        success: function (_a) {
            var confirm = _a.confirm;
            if (!confirm) {
                return;
            }
            http_1.request({
                url: '/api/commodity',
                data: { id: data.id },
                method: 'DELETE'
            })
                .then(function () { return component.reflash(); })
                .then(function () { return wx.showToast({ title: '删除成功' }); })
                .catch(console.log);
        }
    });
}
exports.deleteGoods = deleteGoods;
function formatNumber(n) {
    var str = n.toString();
    return str[1] ? str : '0' + str;
}
//# sourceMappingURL=data:application/json;base64,