"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
Component(({
    externalClasses: ['custom-class'],
    properties: {
        rules: {
            type: Object,
            value: {}
        },
        model: {
            type: Object,
            value: {}
        },
        labelwidth: {
            type: String,
            value: ''
        },
        inline: {
            type: Boolean,
            value: false
        }
    },
    data: {
        fileds: {},
        labelWidth: 0,
        originModel: {},
        id: 0
    },
    attached: function () {
        this.data.originModel = this.data.model;
    },
    relations: {
        '../form_item/form_item': {
            type: 'child',
            linked: function (target) {
                var _a;
                this.data.fileds[target.data.prop || '__default__'] = target;
                var rules = this.data.rules[target.data.prop];
                if (rules) {
                    if (Array.isArray(rules)) {
                        (_a = target.data.rules).push.apply(_a, rules);
                    }
                    else {
                        target.data.rules.push(rules);
                    }
                    target.setData({ rules: target.data.rules });
                }
            },
            unlinked: function (target) {
                delete this.data.fileds[target.data.prop];
            }
        }
    },
    observers: {
        labelWidth: function (val) {
            if (this.data.labelwidth === 'auto') {
                this.data.fileds.forEach(function (wx) { return wx.setData({ labelwidth: val + 'px' }); });
            }
        }
    },
    methods: {
        valid: function () {
            var _this = this;
            var keys = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                keys[_i] = arguments[_i];
            }
            if (keys.length === 0) {
                keys = Object.keys(this.data.fileds);
            }
            return Promise.all(keys.map(function (k) {
                var filed = _this.data.fileds[k];
                if (filed) {
                    return filed.valid(_this.data.model[filed.data.prop]);
                }
                return true;
            }));
        },
        reset: function () {
            Object.values(this.data.fileds).forEach(function (v) { return v.setData({ errMsg: '' }); });
            this.triggerEvent('reset', this.data.originModel, {});
        }
    }
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFnQkEsU0FBUyxDQUFPLENBQUM7SUFDYixlQUFlLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDakMsVUFBVSxFQUFFO1FBQ1IsS0FBSyxFQUFFO1lBQ0gsSUFBSSxFQUFFLE1BQU07WUFDWixLQUFLLEVBQXFDLEVBQUU7U0FDL0M7UUFDRCxLQUFLLEVBQUU7WUFDSCxJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1o7UUFDRCxVQUFVLEVBQUU7WUFDUixJQUFJLEVBQUUsTUFBTTtZQUNaLEtBQUssRUFBRSxFQUFFO1NBQ1o7UUFDRCxNQUFNLEVBQUU7WUFDSixJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxLQUFLO1NBQ2Y7S0FDSjtJQUNELElBQUksRUFBRTtRQUNGLE1BQU0sRUFBZ0MsRUFBRTtRQUN4QyxVQUFVLEVBQUUsQ0FBQztRQUNiLFdBQVcsRUFBRSxFQUFFO1FBQ2YsRUFBRSxFQUFFLENBQUM7S0FDUjtJQUNELFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM1QyxDQUFDO0lBQ0QsU0FBUyxFQUFFO1FBQ1Asd0JBQXdCLEVBQUU7WUFDdEIsSUFBSSxFQUFFLE9BQU87WUFDYixNQUFNLFlBQUMsTUFBTTs7Z0JBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksYUFBYSxDQUFDLEdBQUcsTUFBTSxDQUFDO2dCQUU3RCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEtBQUssRUFBRTtvQkFDUCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ3RCLENBQUEsS0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQSxDQUFDLElBQUksV0FBSSxLQUFLLEVBQUU7cUJBQ3BDO3lCQUFNO3dCQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztxQkFDakM7b0JBRUQsTUFBTSxDQUFDLE9BQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQ2pEO1lBQ0wsQ0FBQztZQUNELFFBQVEsWUFBQyxNQUFNO2dCQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QyxDQUFDO1NBQ0o7S0FDSjtJQUNELFNBQVMsRUFBRTtRQUNQLFVBQVUsWUFBQyxHQUFXO1lBQ2xCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEtBQUssTUFBTSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUFlLElBQUssT0FBQSxFQUFFLENBQUMsT0FBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUF2QyxDQUF1QyxDQUFDLENBQUM7YUFDMUY7UUFDTCxDQUFDO0tBQ0o7SUFDRCxPQUFPLEVBQUU7UUFDTCxLQUFLO1lBQUwsaUJBYUM7WUFiSyxjQUFpQjtpQkFBakIsVUFBaUIsRUFBakIscUJBQWlCLEVBQWpCLElBQWlCO2dCQUFqQix5QkFBaUI7O1lBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ25CLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEM7WUFFRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7Z0JBQ3pCLElBQU0sS0FBSyxHQUFhLEtBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QyxJQUFJLEtBQUssRUFBRTtvQkFDUCxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUN4RDtnQkFFRCxPQUFPLElBQUksQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQztRQUNELEtBQUs7WUFDWSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE9BQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7WUFDdkYsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUQsQ0FBQztLQUNKO0NBQ0osQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtSXRlbSB9IGZyb20gJy4uL2Zvcm1faXRlbS9mb3JtX2l0ZW0nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSdWxlIHtcclxuICAgIHJlcXVpcmVkPzogYm9vbGVhbjtcclxuICAgIG1pbj86IG51bWJlcjtcclxuICAgIG1heD86IG51bWJlcjtcclxuICAgIHJlZ2V4cD86IHN0cmluZztcclxuICAgIGZ1bmM/OiAodmFsdWU6IHN0cmluZyB8IG51bWJlcikgPT4gc3RyaW5nIHwgYm9vbGVhbiB8IHZvaWQgfCBQcm9taXNlPHN0cmluZyB8IGJvb2xlYW4gfCB2b2lkPjtcclxuICAgIG1lc3NhZ2U/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRm9ybSBleHRlbmRzIFd4Q29tcG9uZW50IHtcclxuICAgIHZhbGlkKC4uLmtleXM6IHN0cmluZ1tdKTogUHJvbWlzZTx0cnVlPjtcclxuICAgIHJlc2V0KCk6IHZvaWQ7XHJcbn1cclxuXHJcbkNvbXBvbmVudDxGb3JtPigoe1xyXG4gICAgZXh0ZXJuYWxDbGFzc2VzOiBbJ2N1c3RvbS1jbGFzcyddLFxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHJ1bGVzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcclxuICAgICAgICAgICAgdmFsdWU6IDx7IFtwcm9wOiBzdHJpbmddOiBSdWxlIHwgUnVsZVtdIH0+e31cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IE9iamVjdCxcclxuICAgICAgICAgICAgdmFsdWU6IHt9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYWJlbHdpZHRoOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICAgICAgdmFsdWU6ICcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmxpbmU6IHtcclxuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICBmaWxlZHM6IDx7IFtrOiBzdHJpbmddOiBXeENvbXBvbmVudCB9Pnt9LFxyXG4gICAgICAgIGxhYmVsV2lkdGg6IDAsXHJcbiAgICAgICAgb3JpZ2luTW9kZWw6IHt9LFxyXG4gICAgICAgIGlkOiAwXHJcbiAgICB9LFxyXG4gICAgYXR0YWNoZWQoKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhLm9yaWdpbk1vZGVsID0gdGhpcy5kYXRhLm1vZGVsO1xyXG4gICAgfSxcclxuICAgIHJlbGF0aW9uczoge1xyXG4gICAgICAgICcuLi9mb3JtX2l0ZW0vZm9ybV9pdGVtJzoge1xyXG4gICAgICAgICAgICB0eXBlOiAnY2hpbGQnLFxyXG4gICAgICAgICAgICBsaW5rZWQodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEuZmlsZWRzW3RhcmdldC5kYXRhLnByb3AgfHwgJ19fZGVmYXVsdF9fJ10gPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZXMgPSB0aGlzLmRhdGEucnVsZXNbdGFyZ2V0LmRhdGEucHJvcF07XHJcbiAgICAgICAgICAgICAgICBpZiAocnVsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShydWxlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmRhdGEucnVsZXMucHVzaCguLi5ydWxlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmRhdGEucnVsZXMucHVzaChydWxlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2V0RGF0YSEoeyBydWxlczogdGFyZ2V0LmRhdGEucnVsZXMgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVubGlua2VkKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGF0YS5maWxlZHNbdGFyZ2V0LmRhdGEucHJvcF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZXJzOiB7XHJcbiAgICAgICAgbGFiZWxXaWR0aCh2YWw6IG51bWJlcikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhLmxhYmVsd2lkdGggPT09ICdhdXRvJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmZpbGVkcy5mb3JFYWNoKCh3eDogV3hDb21wb25lbnQpID0+IHd4LnNldERhdGEhKHsgbGFiZWx3aWR0aDogdmFsICsgJ3B4JyB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIHZhbGlkKC4uLmtleXM6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuZGF0YS5maWxlZHMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoa2V5cy5tYXAoayA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlZDogRm9ybUl0ZW0gPSB0aGlzLmRhdGEuZmlsZWRzW2tdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVkLnZhbGlkKHRoaXMuZGF0YS5tb2RlbFtmaWxlZC5kYXRhLnByb3BdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzZXQoKSB7XHJcbiAgICAgICAgICAgICg8Rm9ybUl0ZW1bXT5PYmplY3QudmFsdWVzKHRoaXMuZGF0YS5maWxlZHMpKS5mb3JFYWNoKHYgPT4gdi5zZXREYXRhISh7IGVyck1zZzogJycgfSkpO1xyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudCgncmVzZXQnLCB0aGlzLmRhdGEub3JpZ2luTW9kZWwsIHt9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pKTtcclxuIl19